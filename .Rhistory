ignore.case = TRUE)
df_asm[ind_asm,]$MED_NAME <- df_fda$NONPROPRIETARYNAME[[i]]
}
# manual recoding
vec_asm <- df_asm %>%
mutate(MED_NAME = case_when(str_detect(MED_NAME, regex('vimpat', ignore_case = T)) ~ 'lacosamide',
str_detect(MED_NAME, regex('lacosamide', ignore_case = T)) ~ 'lacosamide',
str_detect(MED_NAME, regex('banzel', ignore_case = T)) ~ 'rufinamide',
str_detect(MED_NAME, regex('tegretol', ignore_case = T)) ~ 'carbamazepine',
str_detect(MED_NAME, regex('carbatrol', ignore_case = T)) ~ 'carbamazepine',
str_detect(MED_NAME, regex('topamax', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('topiram', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('qudexy', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('trokendi', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('eprontia', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('spritam', ignore_case = T)) ~ 'levetiracetam',
str_detect(MED_NAME, regex('keppra', ignore_case = T)) ~ 'levetiracetam',
str_detect(MED_NAME, regex('levetir', ignore_case = T)) ~ 'levetiracetam',
str_detect(MED_NAME, regex('sympazan', ignore_case = T)) ~ 'clobazam',
str_detect(MED_NAME, regex('onfi', ignore_case = T)) ~ 'clobazam',
str_detect(MED_NAME, regex('loraze', ignore_case = T)) ~ 'lorazepam',
str_detect(MED_NAME, regex('midazol', ignore_case = T)) ~ 'midazolam',
str_detect(MED_NAME, regex('nayzilam', ignore_case = T)) ~ 'midazolam',
str_detect(MED_NAME, regex('klonopin', ignore_case = T)) ~ 'clonazepam',
str_detect(MED_NAME, regex('lyrica', ignore_case = T)) ~ 'pregabalin',
str_detect(MED_NAME, regex('pregabalin', ignore_case = T)) ~ 'pregabalin',
str_detect(MED_NAME, regex('zonis', ignore_case = T)) ~ 'zonisamide',
str_detect(MED_NAME, regex('zoneg', ignore_case = T)) ~ 'zonisamide',
str_detect(MED_NAME, regex('valtoco', ignore_case = T)) ~ 'diazepam',
str_detect(MED_NAME, regex('diastat', ignore_case = T)) ~ 'diazepam',
str_detect(MED_NAME, regex('valpro', ignore_case = T)) ~ 'valproic acid',
str_detect(MED_NAME, regex('depak', ignore_case = T)) ~ 'valproic acid',
str_detect(MED_NAME, regex('lacosamide', ignore_case = T)) ~ 'lacosamide',
str_detect(MED_NAME, regex('fycompa', ignore_case = T)) ~ 'perampanel',
str_detect(MED_NAME, regex('perampanel', ignore_case = T)) ~ 'perampanel',
str_detect(MED_NAME, regex('fintepla', ignore_case = T)) ~ 'fintepla',
str_detect(MED_NAME, regex('fenfluramine', ignore_case = T)) ~ 'fenfluramine',
str_detect(MED_NAME, regex('lamot', ignore_case = T)) ~ 'lamotrigine',
str_detect(MED_NAME, regex('oxc', ignore_case = T)) ~ 'oxcarbazepine',
str_detect(MED_NAME, regex('trileptal', ignore_case = T)) ~ 'oxcarbazepine',
str_detect(MED_NAME, regex('loraz', ignore_case = T)) ~ 'lorazepam',
str_detect(MED_NAME, regex('vigabatr', ignore_case = T)) ~ 'vigabatrin',
str_detect(MED_NAME, regex('sabril', ignore_case = T)) ~ 'vigabatrin',
str_detect(MED_NAME, regex('tiagab', ignore_case = T)) ~ 'tiagabine',
str_detect(MED_NAME, regex('rufinam', ignore_case = T)) ~ 'rufinamide',
str_detect(MED_NAME, regex('primid', ignore_case = T)) ~ 'primidone',
str_detect(MED_NAME, regex('phenyt', ignore_case = T)) ~ 'phenytoin',
str_detect(MED_NAME, regex('dilantin', ignore_case = T)) ~ 'phenytoin',
str_detect(MED_NAME, regex('epanutin', ignore_case = T)) ~ 'phenytoin',
str_detect(MED_NAME, regex('cerebyx', ignore_case = T)) ~ 'phenytoin',
str_detect(MED_NAME, regex('phenobarb', ignore_case = T)) ~ 'phenobarbital',
str_detect(MED_NAME, regex('gabapent', ignore_case = T)) ~ 'gabapentin',
str_detect(MED_NAME, regex('felbamat', ignore_case = T)) ~ 'felbamate',
str_detect(MED_NAME, regex('everol', ignore_case = T)) ~ 'everolimus',
str_detect(MED_NAME, regex('ethosux', ignore_case = T)) ~ 'ethosumixide',
str_detect(MED_NAME, regex('zaront', ignore_case = T)) ~ 'ethosumixide',
str_detect(MED_NAME, regex('cenoba', ignore_case = T)) ~ 'cenobamate',
str_detect(MED_NAME, regex('xcopri', ignore_case = T)) ~ 'cenobamate',
str_detect(MED_NAME, regex('cannab', ignore_case = T)) ~ 'cannabidiol',
str_detect(MED_NAME, regex('epidiolex', ignore_case = T)) ~ 'cannabidiol',
str_detect(MED_NAME, regex('briv', ignore_case = T)) ~ 'brivaracetam',
str_detect(MED_NAME, regex('stiri', ignore_case = T)) ~ 'stiripentol',
str_detect(MED_NAME, regex('celontin', ignore_case = T)) ~ 'mesuximide',
str_detect(MED_NAME, regex('eslicarbazepine', ignore_case = T)) ~ 'eslicarbazepine acetate')) %>%
pull(MED_NAME)
# merge matches, drop non-matched rows and unneeded columns
df_asm$MED_NAME <- vec_asm
df_asm <- df_asm[df_asm$MED_NAME %in% asm_vec, ] %>%
select(MedicalRecordNumber, MED_NAME, MED_START_DATE, ORD_MODE_DESC)
# merge in Patient Ids and DOB by MRN, fix date
df_lookup <- df_raw %>%
distinct(PatientId, MedicalRecordNumber, DateOfBirth)
df_med <- df_asm %>%
left_join(df_lookup[ ,c("PatientId", "MedicalRecordNumber", "DateOfBirth")], by = "MedicalRecordNumber") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(MED_START_DATE = lubridate::as_date(MED_START_DATE)) %>%
mutate(AgePrescription = difftime(MED_START_DATE, DateOfBirth, units = "days")) %>%
mutate(MonthsPrescription = as.numeric(round(AgePrescription/30, 0))) %>%
mutate(YearsPrescription = as.numeric(AgePrescription/365.2425))
# mutate(YearsPrescription = as.numeric(round(AgePrescription/365, 0)))
## Descriptive stats
df_med <- df_med %>%
group_by(PatientId) %>%
mutate(n_unique_asm = n_distinct(MED_NAME)) %>% # number of unique ASMs per patient
mutate(n_all_prescriptions = n_distinct(MonthsPrescription)) # number of all prescriptions per patient
## Group analysis: Heatmap (OR)
# define ASM groups, cf. doi.org/10.1007/s40263-021-00827-8
asm_map <- tibble(MED_NAME = asm_vec,
MED_GROUP = NA) %>%
mutate(MED_GROUP = case_when(
str_detect(MED_NAME, regex('felbam', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('valpr', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('hormon', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('zonis', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('rufin', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('cannab', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('cenob', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('topira', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('phenyt', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('carbamaz', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('carbaz', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('lamotr', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('lacosam', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('suxim', ignore_case = T)) ~ 'Ca',
str_detect(MED_NAME, regex('gabap', ignore_case = T)) ~ 'Ca',
str_detect(MED_NAME, regex('pregabal', ignore_case = T)) ~ 'Ca',
str_detect(MED_NAME, regex('phenobarb', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('primidon', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('stirip', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('azol', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('azepam', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('clobaz', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('tiaga', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('vigabatr', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('peramp', ignore_case = T)) ~ 'AMPA',
str_detect(MED_NAME, regex('brivara', ignore_case = T)) ~ 'SV2A',
str_detect(MED_NAME, regex('levetir', ignore_case = T)) ~ 'SV2A',
str_detect(MED_NAME, regex('fenfl', ignore_case = T)) ~ '5-HT',
str_detect(MED_NAME, regex('everol', ignore_case = T)) ~ 'MTOR'
) )
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
## define bin width by equal prescription frequency
# mutate(YearsPrescription = cut_number(YearsPrescription, 4)) %>%
## fixed predefined bin width
mutate(YearsPrescription = cut(YearsPrescription, breaks = c(0, 2, 12, 18, Inf))) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
filter(freqY > 0.01 & freqN > 0.01)
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age at prescription (years)") +
scale_x_discrete(labels = c("0-2", "2-12", "12-18", ">18")) +
scale_fill_gradient2(name = "OR",
# name = str_legend,
labels = c("0", "", "1", "", "Inf"),
low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
### NON-HPO CONCEPT ANALYSIS ---------------------------------------------------
# the basic concept: find out how many UMLS concepts do not match to HPO terms
# find patterns in these concepts, e.g. healthcare utilization or procedures
## data
# load UMLS concepts
# source: nlm.nih.gov/research/umls/
umls_map <- read.delim("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/MRCONSO.RRF",
sep = "|", header = FALSE)
umls_map <- umls_map %>%
as_tibble() %>%
filter(V2 == "ENG") %>%
distinct(V1, V15) %>%
rename(ConceptID = V1, ConceptDesc = V15)
# only keep one description per term (multiple vocabularies)
umls_map <- umls_map %>%
group_by(ConceptID) %>%
filter(row_number() == 1)
# anti-join UMLS vs HPO
df_concepts <- df_genes %>%
ungroup %>%
anti_join(hpo_map, by = "ConceptID")
# get concept descriptions
# note: MRCONSO.RRF represents only a common subset of concepts; the full set of
# the metathesaurus is impractically large for the purpose of this analysis
# some manual annotation downstream will be necessary
df_concepts <- df_concepts %>%
left_join(umls_map, by = "ConceptID")
# save total number of concepts and concepts mapped to HPO
stats_concepts <- tibble(n_all = nrow(df_genes),
n_nonhpo = nrow(df_concepts)) %>%
mutate(ratio = n_nonhpo/n_all, diff = n_all-n_nonhpo)
# find and save list of most common concepts
df_commonconcepts <- df_concepts %>%
count(ConceptID, ConceptDesc) %>%
arrange(desc(n))
# subset to matched cohort; cross-sectional for now
df_conceptmatch <- df_match1 %>%
distinct(PatientId, group) %>%
left_join(df_concepts[, c("PatientId", "ConceptID", "ConceptDesc")], by = "PatientId") %>%
distinct()
# count by group, then do Fisher's test
df_conceptmatch <- df_conceptmatch %>%
group_by(group) %>%
count(ConceptID) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing, keep original values
ungroup() %>%
mutate(P_i = P) %>%
mutate(P = p.adjust(P, method = "bonferroni"))
## QQ plot
pqq <- gg_qqplot(df_conceptmatch$P_i) +
theme_classic() +
annotate(geom = "text", x = -Inf, y = Inf,
hjust = -0.15, vjust = 1 + 0.15 * 3,
label = sprintf("  λ    = %.2f", inflation(df_conceptmatch$P_i)),
size = 5) +
coord_equal() +
theme(aspect.ratio = 1) +
geom_vline(xintercept = -log10(0.05), linetype = "dashed") +
geom_hline(yintercept = -log10(0.05), linetype = "dashed")
# keep significant associations
df_conceptmatch <- df_conceptmatch %>%
filter(P < 0.05)
# get descriptions
df_conceptmatch <- df_conceptmatch %>%
left_join(umls_map, by = "ConceptID")
# manual annotation
df_conceptmatch[df_conceptmatch$ConceptID == "C0478107", ]$ConceptDesc <- NA
df_conceptmatch[df_conceptmatch$ConceptID == "C0476431", ]$ConceptDesc <- NA
# df_conceptmatch[df_conceptmatch$ConceptID == "C0478107", ]$ConceptDesc <- "Other specified chromosome abnormalities"
# df_conceptmatch[df_conceptmatch$ConceptID == "C0476431", ]$ConceptDesc <- "Abnormal karyotype"
df_conceptmatch[df_conceptmatch$ConceptID == "C2875116", ]$ConceptDesc <- "Generalized epilepsy and epileptic syndromes, intractable"
df_conceptmatch[df_conceptmatch$ConceptID == "C2910620", ]$ConceptDesc <- "Screening for cardiovascular disorders"
df_conceptmatch[df_conceptmatch$ConceptID == "C3161331", ]$ConceptDesc <- "Unspecified intellectual disabilities"
df_conceptmatch[df_conceptmatch$ConceptID == "C0341102", ]$ConceptDesc <- "Gastroesophageal reflux disease"
df_conceptmatch[df_conceptmatch$ConceptID == "C2911172", ]$ConceptDesc <- "Other specified health status"
df_conceptmatch[df_conceptmatch$ConceptID == "C2911188", ]$ConceptDesc <- "Other long term drug therapy"
# forest plot
p_forest_nonhpo <- df_conceptmatch %>%
na.omit %>%
slice_max(order_by = OR, n = 8, with_ties = FALSE) %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
oob = scales::oob_squish_infinite) +
scale_y_discrete(labels = label_wrap(30)) +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
### TRANSITION ANALYSIS --------------------------------------------------------
# the idea: find what drives the increase in encounters for likely genetic
# patients during the transition to adult care (ages 18-20 years)
## get data
df_trans <- df_genes %>%
filter(status %in% c("genetic", "nongenetic")) %>%
distinct(PatientId, ConceptID, ContactAge, status) %>%
mutate(age_group = case_when(ContactAge > 18 & ContactAge < 20 ~ 1,
ContactAge < 18 ~ 0,
TRUE ~ NA_real_)) %>%
na.omit
# analyze
df_trans <- df_trans %>%
group_by(age_group, status) %>%
count(ConceptID) %>%
pivot_wider(names_from = age_group, values_from = n) %>%
rename(N = `0`, Y = `1`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
ungroup() %>%
mutate(P = p.adjust(P, method = "bonferroni"))
# keep significant associations
df_trans <- df_trans %>%
filter(P < 0.05)
# get descriptions
df_trans <- df_trans %>%
left_join(umls_map, by = "ConceptID")
# note: compare to non-genetic cohort, sorted by p-value or frequency in the positive transition group
# manual annotation
df_trans[df_trans$ConceptID == "C0260698", ]$ConceptDesc <- "Other postprocedural status"
df_trans[df_trans$ConceptID == "C0036421", ]$ConceptDesc <- "Systemic Scleroderma"
df_trans[df_trans$ConceptID == "C0260860", ]$ConceptDesc <- "Encounter due to Unspecified general medical examination"
df_trans[df_trans$ConceptID == "C0477590", ]$ConceptDesc <- "Other overlap syndromes"
df_trans[df_trans$ConceptID == "C2900579", ]$ConceptDesc <- "Age-related osteoporosis without current pathological fracture"
df_trans[df_trans$ConceptID == "C0260545", ]$ConceptDesc <- "examination; infant or child"
df_trans[df_trans$ConceptID == "C2886562", ]$ConceptDesc <- "Unspecified child maltreatment, confirmed, initial encounter"
df_trans[df_trans$ConceptID == "C2852675", ]$ConceptDesc <- "(...), initial encounter for closed fracture"
df_trans[df_trans$ConceptID == "C2863970", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2852166", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2868158", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0159791", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0159906", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2868158", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2868158", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0152101", ]$ConceptDesc <- "Hypoplastic left heart syndrome"
df_trans[df_trans$ConceptID == "C0375114", ]$ConceptDesc <- "Diabetes mellitus, type I"
df_trans[df_trans$ConceptID == "C0494284", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0260698", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0004352", ]$ConceptDesc <- "Autistic disorder"
df_trans[df_trans$ConceptID == "C2911178", ]$ConceptDesc <- "Encounter for long-term use of anticoagulants"
df_trans[df_trans$ConceptID == "C0004352", ]$ConceptDesc <- "Autistic disorder"
# forest plot: genetic group
pt1 <- df_trans %>%
filter(status == "genetic") %>%
na.omit %>%
slice_max(order_by = Y, n = 4, with_ties = FALSE) %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_point(aes(x = OR), shape = 15, size = 3, color = "#d95f02") +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
limits = c(1, 35),
oob = scales::oob_squish_infinite) +
scale_y_discrete(labels = label_wrap(30)) +
expand_limits(x = 1) +
theme_classic() +
theme(legend.position = "none") +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
# forest plot: nongenetic group
df_trans[df_trans$ConceptID == "C2887465", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0042870", ]$ConceptDesc <- "Vitamin D Deficiency"
df_trans[df_trans$ConceptID == "C2910447", ]$ConceptDesc <- "Encounter for general adult medical examination without abnormal findings"
df_trans[df_trans$ConceptID == "C2911563", ]$ConceptDesc <- "Vitamin D Deficiency"
df_trans[df_trans$ConceptID == "C0042870", ]$ConceptDesc <- "Other specified postprocedural states"
df_trans[df_trans$ConceptID == "C0154714", ]$ConceptDesc <- "Localization-related epilepsy, without mention of intractable epilepsy "
df_trans[df_trans$ConceptID == "C0042870", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0155886", ]$ConceptDesc <- "Asthma"
df_trans[df_trans$ConceptID == "C2910447", ]$ConceptDesc <- "Medical examination w/o abnormal findings"
df_trans[df_trans$ConceptID == "C0154714", ]$ConceptDesc <- "Focal epilepsy, non-intractable"
pt2 <- df_trans %>%
filter(status == "nongenetic") %>%
na.omit %>%
slice_max(order_by = Y, n = 4, with_ties = FALSE) %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_point(aes(x = OR), shape = 15, size = 3, color = "#1b9e77") +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
limits = c(1, 35),
oob = scales::oob_squish_infinite) +
scale_y_discrete(labels = label_wrap(30)) +
expand_limits(x = 1) +
theme_classic() +
theme(legend.position = "none") +
ylab("") +
xlab("Odds ratio (95% CI)")
pt <- cowplot::plot_grid(pt1 + theme(axis.title.x = element_blank()),
pt2,
ncol = 1, align = "v")
### OTHER SUB-ANALYSIS ---------------------------------------------------------
## For HPO OR plot, find the terms that make up geniturourinary system abnormality
# define descendants
vec_desc <- get_descendants(ont_hpo, "HP:0000119")
df_desc <- df_match1 %>%
# remove TSC patients, to see if association remains strong
filter(PatientId %nin% df_tsc$PatientID) %>%
# filter cases by those containing descendant terms
filter(term %in% vec_desc) %>%
filter(group == TRUE) %>%
group_by(term) %>%
count(sort = TRUE) %>%
# get descriptions and ic
left_join(desc_map, by = "term") %>%
left_join(df_ic, by = "term") %>%
ungroup() %>%
# get pvalue for each term, only keep if it's independently significant
left_join(enrich1$data[, c("term", "pvalue")], by = "term") %>%
filter(pvalue < 0.05) %>%
# sort by IC
slice_max(n, prop = 0.9) %>%
arrange(desc(ic))
# reduce to minimal set
vec_min <- minimal_set(ont_hpo, df_desc$term)
df_desc <- df_desc[df_desc$term %in% vec_min, ]
# restrict subgraph by propagating back up from our minimal set
vec_desc <- propagate_relations(ont_hpo, df_desc$term, "parents") %>% unique()
# make igraph, convert to bn
librarian::shelf(igraph)
parents <- ont_hpo$parents
self <- rep(names(parents), lengths(parents))
g <- igraph::make_graph(rbind(unlist(parents), self))
bng <- as.bn(g)
# generate HPO subgraph of node of interest
arcs <- data.frame(bng$arcs)
arcs <- arcs[arcs$X1 %in% vec_desc & arcs$X2 %in% vec_desc, ]
colnames(arcs) <- c("from", "to")
graph_hpo <- empty.graph(vec_desc)
arcs(graph_hpo) <- arcs
# revert to igraph and format graph
g2 <- as.igraph(graph_hpo)
## note: complete term name labels are just impossible to format with igraph
# V(g2)$label <- NA
# V(g2)[vec_min]$label <- paste0("\n", "\n", "\n", "\n", "\n", "\n", "\n", df_desc$description)
# V(g2)["HP:0003244"]$label <- paste0("\n","\n","\n","\n","\n", "\n", "\n", "\n", "\n", "\t","Penile hypospadia")
# V(g2)["HP:0000028"]$label <- paste0("\n", "\n", "\n", "\n", "\n", "\t","Cryptorchidism")
# V(g2)["HP:0000086"]$label <- paste0("\n", "\n", "\t","Ectopic kidney")
V(g2)$label <- NA
V(g2)[vec_min]$label <- rep(LETTERS)[1:length(V(g2)[vec_min]$label)]
V(g2)$color <- "gray"
V(g2)[vec_min]$color <- "red"
V(g2)$size <- 8
vec_size <- -log10(df_desc$pvalue)
vec_size[vec_size < 7] <- 8
V(g2)[vec_min]$size <- vec_size
E(g2)$arrow.mode <- 2
# use ggplotify to get a grob-able object
pqg <- as.ggplot(expression(plot(g2,
vertex.frame.color = "black",
vertex.label.color = "white",
vertex.label.family = "Helvetica",
vertex.label.font = 1,
vertex.label.cex = .9,
# vertex.label.dist = 2.5,
edge.arrow.size = .5,
layout = layout_as_tree))) # Reingold-Tilford graph
pqg <- pqg +
theme(plot.margin = unit(c(-50, -20, -50, -50), "pt"))
### GENERATE REPORT ------------------------------------------------------------
# set global option of decimal point to midline
options(OutDec = "·")
## Figure 1: Descriptive statistics of the study cohort.
Fig1 <- cowplot::plot_grid(p1,
p2 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p3 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p5 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
pt,
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "/Users/cbosselmann/Desktop/GitHub/UMLS-HPO/out/pub_genetic/Fig1.pdf",
width = 12,
height = 8)
Fig1
dev.off()
## Figure 2: Genetic vs. Non-Genetic
Fig2 <- cowplot::plot_grid(pqq,
p_forest_nonhpo,
enrich1$forest,
pqg,
enrich1$plot +
ggtitle("") +
theme_set(theme_classic()) +
coord_cartesian(xlim = c(0, 0.15), ylim = c(0, 0.15)) +
ylab("Frequency, likely genetic patient encounters") +
xlab("Frequency, non-genetic patients encounters"),
enrich8$plot +
ggtitle("") +
theme_set(theme_classic()) +
coord_cartesian(xlim = c(0, 0.5), ylim = c(0, 0.5)) +
ylab("Frequency, SCN1A patient encounters") +
xlab("Frequency, CDKL5 patient encounters"),
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "/Users/cbosselmann/Desktop/GitHub/UMLS-HPO/out/pub_genetic/Fig2.pdf",
width = 12,
height = 8,
encoding = 'CP1253.enc') # to draw Lambda on panel A
Fig2
dev.off()
## Figure 3: Nicer heatmaps of longitudinal phenotypes and prescription patterns
Fig3 <- cowplot::plot_grid(pheat1 + theme(legend.position = "none"),
p_asm,
nrow = 1, labels = "AUTO", align = "none")
pdf(file = "/Users/cbosselmann/Desktop/GitHub/UMLS-HPO/out/pub_genetic/Fig3.pdf",
width = 12,
height = 8)
Fig3
dev.off()
