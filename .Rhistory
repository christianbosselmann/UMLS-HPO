}
# manual recoding
vec_asm <- recodeASM(df_asm)
# merge matches, drop non-matched rows and unneeded columns
df_asm$MED_NAME <- vec_asm
df_asm <- df_asm[df_asm$MED_NAME %in% asm_vec, ] %>%
select(MedicalRecordNumber, MED_NAME, MED_START_DATE, ORD_MODE_DESC)
# merge in Patient Ids and DOB by MRN, fix date
df_lookup <- df_raw %>%
distinct(PatientId, MedicalRecordNumber, DateOfBirth)
df_med <- df_asm %>%
left_join(df_lookup[ ,c("PatientId", "MedicalRecordNumber", "DateOfBirth")], by = "MedicalRecordNumber") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(MED_START_DATE = lubridate::as_date(MED_START_DATE)) %>%
mutate(AgePrescription = difftime(MED_START_DATE, DateOfBirth, units = "days")) %>%
mutate(MonthsPrescription = as.numeric(round(AgePrescription/30, 0))) %>%
mutate(YearsPrescription = as.numeric(AgePrescription/365.2425))
## Descriptive stats
df_med <- df_med %>%
group_by(PatientId) %>%
mutate(n_unique_asm = n_distinct(MED_NAME)) %>% # number of unique ASMs per patient
mutate(n_all_prescriptions = n_distinct(MonthsPrescription)) # number of all prescriptions per patient
## Group analysis: Heatmap (OR)
# define ASM groups
asm_map <- groupASM(asm_vec)
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
## fixed bin width by ILAE age categories
mutate(YearsPrescription = cut(YearsPrescription, breaks = c(0, 2, 12, 18, Inf))) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
ungroup() %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# # frequency filter
# ungroup() %>%
# mutate(freqY = Y/max(Y)) %>%
# mutate(freqN = N/max(N)) %>%
# filter(freqY > 0.01 & freqN > 0.01)
# another frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
mutate(OR = ifelse(freqY > 0.01 & freqN > 0.01, OR, NA))
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
# filter rows with no significant associations
group_by(MED_NAME) %>%
filter(any(!is.na(OR))) %>%
ungroup() %>%
# plot
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age at prescription (years)") +
scale_x_discrete(labels = c("0-2", "2-12", "12-18", ">18")) +
scale_fill_gradient2(name = "OR",
labels = c("0", "", "1", "", "Inf"),
low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0,
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
## subanalysis: do Confirmed genetic patients receive more ASMs?
df_med_sub <- df_med %>%
filter(PatientId %in% df_match1$PatientId) %>%
left_join(df_match1[ ,c("PatientId", "group")]) %>%
distinct(PatientId, AgePrescription, MED_NAME, group)
stats_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
p_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
## subanalysis: Do Confirmed genetic patients receive more rescue medication?
df_med_resc <- df_med_sub %>%
mutate(isRescue = if_else(MED_NAME %in% c("lorazepam", "clonazepam", "clobazam", "diazepam", "midazolam"), T, F))
stats_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
p_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
### NON-HPO CONCEPT ANALYSIS ---------------------------------------------------
# find out how many UMLS concepts do not match to HPO terms
# find patterns in these concepts, e.g. healthcare utilization or procedures
## data
# load UMLS concepts
# source: nlm.nih.gov/research/umls/
umls_map <- read.delim("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/MRCONSO.RRF",
sep = "|", header = FALSE)
umls_map <- umls_map %>%
as_tibble() %>%
filter(V2 == "ENG") %>%
distinct(V1, V15) %>%
rename(ConceptID = V1, ConceptDesc = V15)
# only keep one description per term (multiple vocabularies)
umls_map <- umls_map %>%
group_by(ConceptID) %>%
filter(row_number() == 1)
# anti-join UMLS vs HPO
df_concepts <- df_genes %>%
ungroup %>%
anti_join(hpo_map, by = "ConceptID")
# get concept descriptions
# note: MRCONSO.RRF represents only a common subset of concepts; the full set of
# the metathesaurus is impractically large for the purpose of this analysis
# some manual annotation downstream will be necessary
df_concepts <- df_concepts %>%
left_join(umls_map, by = "ConceptID")
# save total number of concepts and concepts mapped to HPO
stats_concepts <- tibble(n_all = nrow(df_genes),
n_nonhpo = nrow(df_concepts)) %>%
mutate(ratio = n_nonhpo/n_all, diff = n_all-n_nonhpo)
# find and save list of most common concepts
df_commonconcepts <- df_concepts %>%
count(ConceptID, ConceptDesc) %>%
arrange(desc(n))
# subset to matched cohort; cross-sectional for now
df_conceptmatch <- df_match1 %>%
distinct(PatientId, group) %>%
left_join(df_concepts[, c("PatientId", "ConceptID", "ConceptDesc")],
by = "PatientId") %>%
distinct()
# count by group, then do Fisher's test
df_conceptmatch <- df_conceptmatch %>%
group_by(group) %>%
count(ConceptID) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing, keep original values
ungroup() %>%
mutate(P_i = P) %>%
mutate(P = p.adjust(P, method = "bonferroni"))
## QQ plot
pqq <- gg_qqplot(df_conceptmatch$P_i) +
theme_classic() +
annotate(geom = "text", x = -Inf, y = Inf,
hjust = -0.15, vjust = 1 + 0.15 * 3,
label = sprintf("  Î»    = %.2f", inflation(df_conceptmatch$P_i)),
size = 5) +
coord_equal() +
theme(aspect.ratio = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
geom_hline(yintercept = -log10(0.05/length(unique(df_match1$ConceptID))), linetype = "dashed", col = "red")
# keep significant associations: FDR
df_conceptmatch <- df_conceptmatch %>%
filter(P < 0.05)
# get descriptions; note: to discuss in text
df_conceptmatch <- df_conceptmatch %>%
left_join(umls_map, by = "ConceptID")
# manual annotation (labels missing in MRCONSO.RFF)
df_conceptmatch[df_conceptmatch$ConceptID == "C0478107", ]$ConceptDesc <- NA
df_conceptmatch[df_conceptmatch$ConceptID == "C0476431", ]$ConceptDesc <- NA
df_conceptmatch[df_conceptmatch$ConceptID == "C2875116", ]$ConceptDesc <- "Generalized epilepsy and epileptic syndromes, intractable"
df_conceptmatch[df_conceptmatch$ConceptID == "C2910620", ]$ConceptDesc <- "Screening for cardiovascular disorders"
df_conceptmatch[df_conceptmatch$ConceptID == "C3161331", ]$ConceptDesc <- "Unspecified intellectual disabilities"
df_conceptmatch[df_conceptmatch$ConceptID == "C0341102", ]$ConceptDesc <- "Gastroesophageal reflux disease"
df_conceptmatch[df_conceptmatch$ConceptID == "C2911172", ]$ConceptDesc <- "Other specified health status"
df_conceptmatch[df_conceptmatch$ConceptID == "C2911188", ]$ConceptDesc <- "Other long term drug therapy"
# forest plot
p_forest_nonhpo <- df_conceptmatch %>%
na.omit %>%
slice_max(order_by = OR, n = 8, with_ties = FALSE) %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
oob = scales::oob_squish_infinite) +
scale_y_discrete(labels = label_wrap(30)) +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
### TRANSITION ANALYSIS --------------------------------------------------------
# find what drives the increase in encounters for Confirmed genetic
# patients during the transition to adult care (ages 18-20 years)
## get data
df_trans <- df_genes %>%
filter(status %in% c("0", "1")) %>%
distinct(PatientId, ConceptID, ContactAge, status) %>%
mutate(age_group = case_when(ContactAge > 18 & ContactAge < 20 ~ 1,
ContactAge < 18 ~ 0,
TRUE ~ NA_real_)) %>%
na.omit
# analyze
df_trans <- df_trans %>%
group_by(age_group, status) %>%
count(ConceptID) %>%
pivot_wider(names_from = age_group, values_from = n) %>%
rename(N = `0`, Y = `1`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
ungroup() %>%
mutate(P = p.adjust(P, method = "bonferroni"))
# keep significant associations
df_trans <- df_trans %>%
filter(P < 0.05)
# get descriptions
df_trans <- df_trans %>%
left_join(umls_map, by = "ConceptID")
# note: compare to non-genetic cohort
# sorted by p-value or frequency in the positive transition group
# manual annotation for plot and recoding of synonymous concepts
df_trans[df_trans$ConceptID == "C0260698", ]$ConceptDesc <- "Other postprocedural status"
df_trans[df_trans$ConceptID == "C0036421", ]$ConceptDesc <- "Systemic Scleroderma"
df_trans[df_trans$ConceptID == "C0260860", ]$ConceptDesc <- "Encounter due to Unspecified general medical examination"
df_trans[df_trans$ConceptID == "C0477590", ]$ConceptDesc <- "Other overlap syndromes"
df_trans[df_trans$ConceptID == "C2900579", ]$ConceptDesc <- "Age-related osteoporosis without current pathological fracture"
df_trans[df_trans$ConceptID == "C0260545", ]$ConceptDesc <- "examination; infant or child"
df_trans[df_trans$ConceptID == "C2886562", ]$ConceptDesc <- "Unspecified child maltreatment, confirmed, initial encounter"
df_trans[df_trans$ConceptID == "C2852675", ]$ConceptDesc <- "(...), initial encounter for closed fracture"
df_trans[df_trans$ConceptID == "C2863970", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2852166", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2868158", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0159791", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0159906", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2868158", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C2868158", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0152101", ]$ConceptDesc <- "Hypoplastic left heart syndrome"
df_trans[df_trans$ConceptID == "C0375114", ]$ConceptDesc <- "Diabetes mellitus, type I"
df_trans[df_trans$ConceptID == "C0494284", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0260698", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0004352", ]$ConceptDesc <- "Autistic disorder"
df_trans[df_trans$ConceptID == "C2911178", ]$ConceptDesc <- "Encounter for long-term use of anticoagulants"
df_trans[df_trans$ConceptID == "C0004352", ]$ConceptDesc <- "Autistic disorder"
df_trans[df_trans$ConceptID == "C2911575", ]$ConceptDesc <- "Dependence on respirator [ventilator] status"
df_trans[df_trans$ConceptID == "C0477972", ]$ConceptDesc <- "Congenital malformations of brain"
df_trans[df_trans$ConceptID == "C0154719", ]$ConceptDesc <- "Other forms of epilepsy and recurrent seizures"
# forest plot: genetic group
pt1 <- df_trans %>%
filter(status == "1") %>%
na.omit %>%
slice_max(order_by = Y, n = 4, with_ties = FALSE) %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_point(aes(x = OR), shape = 15, size = 3, color = pal_val[[2]]) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
limits = c(1, 35),
oob = scales::oob_squish_infinite) +
scale_y_discrete(labels = label_wrap(30)) +
expand_limits(x = 1) +
theme_classic() +
theme(legend.position = "none") +
ylab("") +
xlab("Odds ratio (95% CI)")
# forest plot: nongenetic group
# manual annotation for plot and recoding of synonymous concepts
df_trans[df_trans$ConceptID == "C2887465", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0042870", ]$ConceptDesc <- "Vitamin D Deficiency"
df_trans[df_trans$ConceptID == "C2910447", ]$ConceptDesc <- "Encounter for general adult medical examination without abnormal findings"
df_trans[df_trans$ConceptID == "C2911563", ]$ConceptDesc <- "Vitamin D Deficiency"
df_trans[df_trans$ConceptID == "C0042870", ]$ConceptDesc <- "Other specified postprocedural states"
df_trans[df_trans$ConceptID == "C0154714", ]$ConceptDesc <- "Localization-related epilepsy, without mention of intractable epilepsy "
df_trans[df_trans$ConceptID == "C0042870", ]$ConceptDesc <- NA
df_trans[df_trans$ConceptID == "C0477972", ]$ConceptDesc <- "Other specified congenital malformations of brain"
df_trans[df_trans$ConceptID == "C2875146", ]$ConceptDesc <- "Migraine without aura, not intractable"
df_trans[df_trans$ConceptID == "C0155886", ]$ConceptDesc <- "Asthma"
df_trans[df_trans$ConceptID == "C2910447", ]$ConceptDesc <- "Medical examination w/o abnormal findings"
df_trans[df_trans$ConceptID == "C0154714", ]$ConceptDesc <- "Focal epilepsy, non-intractable"
df_trans[df_trans$ConceptID == "C2875148", ]$ConceptDesc <- "Migraine without aura, intractable"
df_trans[df_trans$ConceptID == "C0028768", ]$ConceptDesc <- "Obsessive-Compulsive Disorder"
pt2 <- df_trans %>%
filter(status == "0") %>%
na.omit %>%
slice_max(order_by = Y, n = 4, with_ties = FALSE) %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_point(aes(x = OR), shape = 15, size = 3, color = pal_val[[1]]) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
limits = c(1, 35),
oob = scales::oob_squish) +
scale_y_discrete(labels = label_wrap(30)) +
expand_limits(x = 1) +
theme_classic() +
theme(legend.position = "none") +
ylab("") +
xlab("Odds ratio (95% CI)")
pt <- cowplot::plot_grid(pt1 + theme(axis.title.x = element_blank()),
pt2,
ncol = 1, align = "v")
### INPATIENT / OUTPATIENT STATS -----------------------------------------------
## data: use prescription and admission data to find inpatient/outpatient encounters
df_stays <- df_med %>%
distinct(PatientId, AgePrescription, ORD_MODE_DESC)
df_nstays <- df_stays %>%
mutate(ORD_MODE_DESC = factor(ORD_MODE_DESC, levels = c("INPATIENT", "OUTPATIENT"))) %>%
group_by(PatientId, .drop = FALSE) %>%
count(ORD_MODE_DESC)
# find PatientIds who had multiple inpatient encounters
df_inpatient <- df_nstays %>%
filter(ORD_MODE_DESC == "INPATIENT" & n > 1) %>%
mutate(hasInpatient = TRUE)
# stats: are Confirmed genetic patients more likely to be seen inpatient?
map_match <- df_match1 %>%
distinct(PatientId, group)
p_inpatient <- df_inpatient %>%
left_join(map_match) %>%
na.omit %>%
ungroup() %>%
summarize(pval = t.test(n ~ group)$p.value)
stats_inpatient <- df_inpatient %>%
left_join(map_match) %>%
na.omit %>%
group_by(group) %>%
summarize(mean = mean(n), median = median(n),
sd = sd(n),
min = min(n), max = max(n),
n = n_distinct(PatientId))
### ER VISITS -----------------------------------------------------------------
## data: ER admissions for all patients
df_er <- readxl::read_excel("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/ER_Visits.xlsx")
# get group label
df_er <- df_er %>%
rename(PatientId = PatientID) %>%
left_join(map_match) %>%
na.omit
# subset to strict cohort criteria
df_er <- df_er %>%
filter(PatientId %in% df$PatientId)
# count admissions for each patient
p_er <- df_er %>%
add_count(PatientId, AdmissionType) %>%
summarize(pval = t.test(n ~ group)$p.value)
stats_er <- df_er %>%
group_by(group) %>%
add_count(PatientId, AdmissionType) %>%
summarize(mean = mean(n), median = median(n),
sd = sd(n),
min = min(n), max = max(n),
n = n_distinct(PatientId))
df_er <- df_er %>%
group_by(group) %>%
add_count(PatientId, AdmissionType) %>%
distinct(PatientId, n)
### OTHER SUB-ANALYSIS ---------------------------------------------------------
## For HPO OR plot, find the terms that make up geniturourinary system abnormality
# define descendants
vec_desc <- get_descendants(ont_hpo, "HP:0000119")
df_desc <- df_match1 %>%
# filter cases by those containing descendant terms
filter(term %in% vec_desc) %>%
filter(group == TRUE) %>%
group_by(term) %>%
count(sort = TRUE) %>%
# get descriptions and ic
left_join(desc_map, by = "term") %>%
left_join(df_ic, by = "term") %>%
ungroup() %>%
# get pvalue for each term, only keep if it's independently significant
left_join(enrich1$data[, c("term", "pvalue")], by = "term") %>%
filter(pvalue < 0.05) %>%
# sort by IC
slice_max(n, prop = 0.9) %>%
arrange(desc(ic))
# reduce to minimal set
vec_min <- minimal_set(ont_hpo, df_desc$term)
df_desc <- df_desc[df_desc$term %in% vec_min, ]
# restrict subgraph by propagating back up from our minimal set
vec_desc <- propagate_relations(ont_hpo, df_desc$term, "parents") %>% unique()
# make igraph, convert to bn
librarian::shelf(igraph)
parents <- ont_hpo$parents
self <- rep(names(parents), lengths(parents))
g <- igraph::make_graph(rbind(unlist(parents), self))
bng <- as.bn(g)
# generate HPO subgraph of node of interest
arcs <- data.frame(bng$arcs)
arcs <- arcs[arcs$X1 %in% vec_desc & arcs$X2 %in% vec_desc, ]
colnames(arcs) <- c("from", "to")
graph_hpo <- empty.graph(vec_desc)
arcs(graph_hpo) <- arcs
# revert to igraph and format graph
g2 <- as.igraph(graph_hpo)
V(g2)$label <- NA
V(g2)[vec_min]$label <- rep(LETTERS)[1:length(V(g2)[vec_min]$label)]
V(g2)$color <- "gray"
V(g2)[vec_min]$color <- pal_val[[2]]
V(g2)$size <- 8
vec_size <- -log10(df_desc$pvalue)
vec_size[vec_size < 7] <- 8
V(g2)[vec_min]$size <- vec_size
E(g2)$arrow.mode <- 2
# use ggplotify to get a grob-able object
pqg <- as.ggplot(expression(plot(g2,
vertex.frame.color = "black",
vertex.label.color = "white",
vertex.label.family = "Helvetica",
vertex.label.font = 1,
vertex.label.cex = .9,
edge.arrow.size = .5,
layout = layout_as_tree))) # Reingold-Tilford
pqg <- pqg +
theme(plot.margin = unit(c(-50, -20, -50, -50), "pt"))
### EXPORT ---------------------------------------------------------------------
p2_3 <- cowplot::plot_grid(p2, p3, ncol = 1, labels = "", align = "hv")
pt1_2 <- cowplot::plot_grid(pt1, pt2, ncol = 1, labels = "", align = "hv")
FigSx <- cowplot::plot_grid(p2_3, p4, pt1_2, nrow = 1, labels = c("AUTO"), align = "v", axis = "b")
pdf(file = "FigSx.pdf",
width = 12,
height = 4)
FigSx
dev.off()
FigSy <- cowplot::plot_grid(enrich1$forest +
theme(plot.margin = margin(.5,0,.5,0, "cm")), # trbl
pqg,
enrich1$plot +
scale_color_manual(values = c(pal_val[[2]], "black")) +
ggtitle("") +
theme_set(theme_classic()) +
ylab("Frequency, genetic patient encounters") +
xlab("Frequency, non-genetic patients encounters") +
theme(plot.margin = margin(0,0,.5,0, "cm")),
# rel_widths = c(0.4, .2, .4),
nrow = 1, labels = "AUTO", align = "none")
pdf(file = "FigSy.pdf",
width = 12,
height = 4)
FigSy
dev.off()
FigSz <- cowplot::plot_grid(pheat1 + theme(legend.position = "none"),
p_asm,
nrow = 1, labels = "AUTO", align = "none")
pdf(file = "FigSz.pdf",
width = 12,
height = 8)
FigSz
dev.off()
RColorBrewer::brewer.pal(n = 3, "Dark2")
table(df$GENEPOS_comb)
df %>%
distinct(PatientId, GENEPOS_comb) %>%
table
df %>%
distinct(PatientId, GENEPOS_comb)
df %>%
distinct(PatientId, GENEPOS_comb) %>%
group_by(GENEPOS_comb) %>%
summarize(n = n())
tmp <- read_excel("~/Desktop/CCF/EMR cohort study/Manuscript/v7 rejection/Old/chartreview_2023-04-28.xlsx")
tmp <- readxl::read_excel("~/Desktop/CCF/EMR cohort study/Manuscript/v7 rejection/Old/chartreview_2023-04-28.xlsx")
tmp
tmp %>%
filter(comment %like% "VUS")
tmp %>%
filter(comment %like% "pending")
table(tmp$is_genetic)
