filter(hasInpatient == TRUE) %>%
mutate(score = 3)
## C3: Visits or consults with multiple specialists other than general pediatricians.
# True for all patients (due to cohort definition)
ls_pheindex[[3]]  <- df_pheindex %>%
distinct(PatientId) %>%
mutate(score = 3)
## C4: Multiple emergency room (ER) visits.
# NA
## C5: Feeding support (Gastrostomy tube).
ls_pheindex[[5]] <- rbind(
# df_pheindex[df_pheindex$ConceptID == "C0699815", ], # Feeding difficulties and mismanagement
# df_pheindex[df_pheindex$ConceptID == "C0159023", ], # Feeding problems in newborn
# df_pheindex[df_pheindex$ConceptID == "C5539211", ], # Other feeding difficulties
df_pheindex[df_pheindex$ConceptID == "C0260683", ], # Gastrostomy status
# df_pheindex[df_pheindex$ConceptID == "C0270273", ], # Slow feeding in newborn
# df_pheindex[df_pheindex$ConceptID == "C5539209", ], # Feeding difficulties, unspecified
# df_pheindex[df_pheindex$ConceptID == "C0478153", ], # Other symptoms and signs concerning food and fluid intake
df_pheindex[df_pheindex$ConceptID == "C0260761", ] # Encounter for attention to gastrostomy
) %>%
distinct(PatientId, score) %>%
mutate(score = 2)
## C6: Respiratory support (tracheostomy and mechanical ventilation outside of surgery).
ls_pheindex[[6]] <- rbind(
# df_pheindex[df_pheindex$ConceptID == "C0348712", ], # Other disorders of lung
# df_pheindex[df_pheindex$ConceptID == "C0431510", ], # Other anomalies of larynx, trachea, and bronchus
# df_pheindex[df_pheindex$ConceptID == "C0029601", ], # Other respiratory anomalies
df_pheindex[df_pheindex$ConceptID == "C0260682", ], # Tracheostomy status
# df_pheindex[df_pheindex$ConceptID == "C0748355", ], # Acute respiratory distress
# df_pheindex[df_pheindex$ConceptID == "C0456017", ], # Chronic respiratory disease in perinatal period
df_pheindex[df_pheindex$ConceptID == "C2911575", ] # Dependence on respirator [ventilator] status
# df_pheindex[df_pheindex$ConceptID == "C2977073", ] # Respiratory failure, unspecified
) %>%
distinct(PatientId, score) %>%
mutate(score = 2)
## C7: Imaging.
# NA
## C8: Genetic diagnostic tests.
# True for all likely genetic patients, false for all non-genetic patients.
ls_pheindex[[8]] <- df_match1 %>%
distinct(PatientId, group) %>%
filter(group == TRUE) %>%
mutate(score = 1)
## C9: Metabolic diagnostic tests
ls_pheindex[[9]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0494356", ], # Hypo-osmolality and hyponatremia
df_pheindex[df_pheindex$ConceptID == "C0020645", ], # Hyposmolality and/or hyponatremia
df_pheindex[df_pheindex$ConceptID == "C0029481", ] # Other abnormal blood chemistry
) %>%
distinct(PatientId, score) %>%
mutate(score = 1)
## C10: In-hospital death
# True for all deaths in survival analysis, false otherwise
ls_pheindex[[10]] <- df_surv %>%
filter(survivalFlag == 1) %>%
distinct(PatientId) %>%
mutate(score = 3)
## C11: Developmental delay.
ls_pheindex[[11]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0424605", ], # Developmental delay
df_pheindex[df_pheindex$ConceptID == "C0878706", ], # Lack of normal physiological development, unspecified
df_pheindex[df_pheindex$ConceptID == "C0476241", ], # Delayed developmental milestones
df_pheindex[df_pheindex$ConceptID == "C0878753", ], # Unspecified lack of expected normal physiological development in childhood
df_pheindex[df_pheindex$ConceptID == "C0154633", ], # Other developmental speech or language disorder
df_pheindex[df_pheindex$ConceptID == "C2830458", ], # Delayed milestone in childhood
df_pheindex[df_pheindex$ConceptID == "C0011757", ], # Developmental Coordination Disorder
df_pheindex[df_pheindex$ConceptID == "C0349324", ], # Other developmental disorders of speech and language
df_pheindex[df_pheindex$ConceptID == "C0236826", ], # Developmental expressive language disorder
df_pheindex[df_pheindex$ConceptID == "C3161331", ] # Unspecified intellectual disabilities
) %>%
distinct(PatientId, score) %>%
mutate(score = 1)
## C12: Diagnosis codes corresponding to metabolic diseases with â‰¥ 2 encounters
ls_pheindex[[12]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0025517", ], # Metabolic Diseases
df_pheindex[df_pheindex$ConceptID == "C0268641", ] # Amino acid transport disorder
) %>%
distinct(PatientId, score) %>%
mutate(score = 3)
## C13: Heart surgeries
ls_pheindex[[13]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C2921289", ], # Personal history of (corrected) congenital malformations of heart and circulatory system
df_pheindex[df_pheindex$ConceptID == "C0477999", ] # Other specified congenital malformations of heart
) %>%
distinct(PatientId, score) %>%
mutate(score = 3)
## get group membership for each patient, calculate pheindex scores
df_pheindex <- lapply(ls_pheindex, function(x){x <- x[,c("PatientId", "score")]}) %>%
rbindlist(idcol = "id")
map_match <- df_match1 %>%
distinct(PatientId, group)
df_pheindex <- df_pheindex %>%
group_by(PatientId) %>%
summarize(score = sum(score)) %>%
left_join(map_match) %>%
na.omit
stats_pheindex <- df_pheindex %>%
group_by(group) %>%
summarize(mean = mean(score),
sd = sd(score),
min = min(score),
max = max(score),
iqr = IQR(score))
stats_p_pheindex <- df_pheindex %>%
summarize(pval = t.test(score ~ group)$p.value)
## recode
df_pheindex <- df_pheindex %>%
mutate(group = as.integer(group))
df_pheindex$label <- NA
df_pheindex[df_pheindex$group == 0, ]$label <- "Non-genetic"
df_pheindex[df_pheindex$group == 1, ]$label <- "Likely genetic"
## visualization: PhenIndex by group
p_pheindex_violin <-df_pheindex %>%
mutate(label = as.factor(label)) %>%
ggplot(aes(y = score, x = label, fill = label)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), alpha = .8) +
guides(fill = "none", color = "none") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
xlab("Group") +
ylab("PheIndex score") +
theme_classic() +
coord_cartesian(xlim = c(1.5, 2)) +
geom_boxplot(width = .1, show.legend = FALSE, outlier.shape = NA, alpha = 0.5) +
ggpubr::stat_compare_means(aes(label = ..p.signif..),
comparisons = list(c("Non-genetic", "Likely genetic")),
label.x = 1.5, label.y = c(15))
## visualization: PhenIndex categories by group (id)
df_phenindex <- lapply(ls_pheindex, function(x){x <- x[,c("PatientId", "score")]}) %>%
rbindlist(idcol = "id") %>%
group_by(PatientId, id) %>%
summarize(score = sum(score)) %>%
left_join(map_match) %>%
na.omit
p_pheindex_bar <- df_phenindex %>%
ggplot(aes(x = as.factor(id), fill = group)) +
geom_bar(position = position_dodge2(width = 0.9, preserve = "single")) +
xlab("PheIndex criteria (#)") +
ylab("Individuals (n)") +
guides(fill = "none", color = "none") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2", labels = c("Non-genetic", "Likely genetic")) +
theme_classic() +
coord_cartesian(expand = FALSE)
# PheIndex criteria pairwise similarity heatmap
df_phenindex <- df_phenindex %>%
mutate(id = as.factor(id))
ls_phenindex <- split(df_phenindex, df_phenindex$id)
ls_phenindex <- lapply(ls_phenindex, function(x){x <- x$PatientId})
df_prop <- ls_phenindex %>%
map_dfr(~ .x %>% as_tibble(), .id = "name")
df_prop <- reshape2::dcast(df_prop, name ~ value, length)
df_prop <- df_prop[,-1]
df_prop[df_prop > 0] <- 1
mat_pheno <- proxy::simil(x = df_prop,
method = "cosine") # "jaccard", "euclidean", "cosine"
mat_pheno <- as.matrix(mat_pheno)
diag(mat_pheno) <- 1
colnames(mat_pheno) <- levels(df_phenindex$id)
rownames(mat_pheno) <- levels(df_phenindex$id)
coul <- colorRampPalette(brewer.pal(8, "Reds"))(25)
# plot
p_pheindex_heatmap <- pheatmap(mat_pheno,
display_numbers = TRUE,
symm = TRUE,
col = coul,
fontsize_number = 6,
xlab = "PheIndex criteria (#)",
ylab = "PheIndex criteria (#)")
p_pheindex_heatmap <- ggplotify::as.ggplot(p_pheindex_heatmap)
# # CX: Preterm
# df_pheindex[df_pheindex$ConceptID == "C2909946", ] # Preterm newborn, unspecified weeks of gestation
# df_pheindex[df_pheindex$ConceptID == "C0029713", ] # Other preterm infants
# df_pheindex[df_pheindex$ConceptID == "C3264533", ] # Extreme immaturity of newborn
### OTHER SUB-ANALYSIS ---------------------------------------------------------
## For HPO OR plot, find the terms that make up geniturourinary system abnormality
# define descendants
vec_desc <- get_descendants(ont_hpo, "HP:0000119")
df_desc <- df_match1 %>%
# remove TSC patients, to see if association remains strong
filter(PatientId %nin% df_tsc$PatientID) %>%
# filter cases by those containing descendant terms
filter(term %in% vec_desc) %>%
filter(group == TRUE) %>%
group_by(term) %>%
count(sort = TRUE) %>%
# get descriptions and ic
left_join(desc_map, by = "term") %>%
left_join(df_ic, by = "term") %>%
ungroup() %>%
# get pvalue for each term, only keep if it's independently significant
left_join(enrich1$data[, c("term", "pvalue")], by = "term") %>%
filter(pvalue < 0.05) %>%
# sort by IC
slice_max(n, prop = 0.9) %>%
arrange(desc(ic))
# reduce to minimal set
vec_min <- minimal_set(ont_hpo, df_desc$term)
df_desc <- df_desc[df_desc$term %in% vec_min, ]
# restrict subgraph by propagating back up from our minimal set
vec_desc <- propagate_relations(ont_hpo, df_desc$term, "parents") %>% unique()
# make igraph, convert to bn
librarian::shelf(igraph)
parents <- ont_hpo$parents
self <- rep(names(parents), lengths(parents))
g <- igraph::make_graph(rbind(unlist(parents), self))
bng <- as.bn(g)
# generate HPO subgraph of node of interest
arcs <- data.frame(bng$arcs)
arcs <- arcs[arcs$X1 %in% vec_desc & arcs$X2 %in% vec_desc, ]
colnames(arcs) <- c("from", "to")
graph_hpo <- empty.graph(vec_desc)
arcs(graph_hpo) <- arcs
# revert to igraph and format graph
g2 <- as.igraph(graph_hpo)
V(g2)$label <- NA
V(g2)[vec_min]$label <- rep(LETTERS)[1:length(V(g2)[vec_min]$label)]
V(g2)$color <- "gray"
V(g2)[vec_min]$color <- "red"
V(g2)$size <- 8
vec_size <- -log10(df_desc$pvalue)
vec_size[vec_size < 7] <- 8
V(g2)[vec_min]$size <- vec_size
E(g2)$arrow.mode <- 2
# use ggplotify to get a grob-able object
pqg <- as.ggplot(expression(plot(g2,
vertex.frame.color = "black",
vertex.label.color = "white",
vertex.label.family = "Helvetica",
vertex.label.font = 1,
vertex.label.cex = .9,
edge.arrow.size = .5,
layout = layout_as_tree))) # Reingold-Tilford
pqg <- pqg +
theme(plot.margin = unit(c(-50, -20, -50, -50), "pt"))
### GENERATE REPORT ------------------------------------------------------------
# set global option of decimal point to midline for Lancet
options(OutDec = "Â·")
## Figure 1: Descriptive statistics of the study cohort.
Fig1 <- cowplot::plot_grid(p1,
p2 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p3 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p5 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
pt,
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig1.pdf",
width = 12,
height = 8)
Fig1
dev.off()
## Figure 2: Genetic vs. Non-Genetic
Fig2 <- cowplot::plot_grid(pqq,
p_forest_nonhpo,
enrich1$forest,
pqg,
enrich1$plot +
ggtitle("") +
theme_set(theme_classic()) +
coord_cartesian(xlim = c(0, 0.15), ylim = c(0, 0.15)) +
ylab("Frequency, likely genetic patient encounters") +
xlab("Frequency, non-genetic patients encounters"),
enrich8$plot +
ggtitle("") +
theme_set(theme_classic()) +
coord_cartesian(xlim = c(0, 0.5), ylim = c(0, 0.5)) +
ylab("Frequency, SCN1A patient encounters") +
xlab("Frequency, CDKL5 patient encounters"),
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig2.pdf",
width = 12,
height = 8,
encoding = 'CP1253.enc') # to draw Lambda on panel A
Fig2
dev.off()
## Figure 3: Nicer heatmaps of longitudinal phenotypes and prescription patterns
Fig3 <- cowplot::plot_grid(pheat1 + theme(legend.position = "none"),
p_asm,
nrow = 1, labels = "AUTO", align = "none")
pdf(file = "Fig3.pdf",
width = 12,
height = 8)
Fig3
dev.off()
## Figure S1: Kaplan-Meier plot
pdf(file = "FigS1.pdf",
width = 8,
height = 6)
p_surv
dev.off()
## Figure S2: PheIndex plots
FigS2 <- cowplot::plot_grid(p_pheindex_violin, p_pheindex_bar, p_pheindex_heatmap,
nrow = 1, labels = "AUTO", align = "hv")
pdf(file = "FigS2.pdf",
width = 12,
height = 4)
FigS2
dev.off()
### CHART REVIEW --------------------------------------------------------------
# pull patient MRNs for manual chart review
df_match1 %>%
filter(term == "HP:0000083") %>% # renal insufficiency
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000083.csv")
df_match1 %>%
filter(term == "HP:0004383") %>% # hypoplastic left heart syndrome
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0004383.csv")
### MISC ----------------------------------------------------------------------
## get the number of SCN1A patients in the cohort and their mean follow-up
tmp_scn1a <- df_scn1a %>%
rename(MedicalRecordNumber = PAT_MRN_ID) %>%
left_join(mrn_map)
tmp_scn1a_fu <- p1$data %>%
filter(PatientId %in% tmp_scn1a$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(mean = mean(dur), median = median(dur),
sd = sd(dur), min = min(dur), max = max(dur),
iqr = IQR(dur))
## DL analysis 08/03/2023
# wants to see group differences between non-mapped terms in a list provided by Mark
tmp_xl <- readxl::read_excel("~/Desktop/EpilepsyHPO Mappings.xlsx", sheet = 2)
### CHART REVIEW --------------------------------------------------------------
# pull patient MRNs for manual chart review
df_match1 %>%
filter(term == "HP:0000083") %>% # renal insufficiency
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000083.csv")
df_match1 %>%
filter(term == "HP:0004383") %>% # hypoplastic left heart syndrome
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0004383.csv")
df_match1 %>%
filter(term == "HP:0000028") %>% # cryptorchidism
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000028.csv")
df_match1 %>%
filter(term == "HP:0000047") %>% # hypospadia
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000047.csv")
df_match1 %>%
filter(term == "HP:0000939") %>% # osteoporosis
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000939.csv")
### UTILIZATION ANALYSIS -------------------------------------------------------
## data: list of patient specialist encounters from Alina Ivaniuk, 2023-03-07
df_util <- readxl::read_excel("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/procedures_epi_cohort.xls")
head(df_util)
### UTILIZATION ANALYSIS -------------------------------------------------------
## data: list of patient specialist encounters from Alina Ivaniuk, 2023-03-07
# TODO: update input data. current table omits rows as max file length has been reached.
df_util <- readxl::read_excel("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/procedures_epi_cohort.xls", skip = 2)
df_util
# subset by case-control cohort
df_util <- df_util %>%
filter(PatientID %in% df_match1$PatientId)
# get count of unique specialtry descriptions per patient
df_util %>%
group_by(PatientID) %>%
distinct(PatientID, SPECIALTY_DESC) %>%
count()
length(unique(df_util$PatientID))
view(df_util)
df_genes
df_raw
df_lookup
df_util
df_match1
# get date of birth from df_lookup and calculate age at encounter
tmp <- df_util %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId")
df_util
# get date of birth from df_lookup and calculate age at encounter
tmp <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId")
tmp
tmp <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth))
view(tmp)
# get date of birth from df_lookup and calculate age at encounter
tmp <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(ENC_DT = lubridate::mdy(ENC_DT)) %>%
mutate(AgePrescription = difftime(ENC_DT, DateOfBirth, units = "days"))
# get date of birth from df_lookup and calculate age at encounter
tmp <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(ENC_DT = lubridate::as_date(ENC_DT)) %>%
mutate(AgePrescription = difftime(ENC_DT, DateOfBirth, units = "days"))
view(tmp)
# get date of birth from df_lookup and calculate age at encounter
tmp <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(ENC_DT = lubridate::as_date(ENC_DT)) %>%
mutate(AgeAtEncounter = difftime(ENC_DT, DateOfBirth, units = "days"))
# get date of birth from df_lookup and calculate age at encounter
df_util <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(ENC_DT = lubridate::as_date(ENC_DT)) %>%
mutate(AgeAtEncounter = difftime(ENC_DT, DateOfBirth, units = "days")) %>%
mutate(MonthsEncounter = as.numeric(round(AgeAtEncounter/30, 0))) %>%
mutate(YearsEncounter = as.numeric(AgeAtEncounter/365.2425))
view(df_util)
df_match1
### UTILIZATION ANALYSIS -------------------------------------------------------
## data: list of patient specialist encounters from Alina Ivaniuk, 2023-03-07
# TODO: update input data. current table omits rows as max file length has been reached.
df_util <- read_csv("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/encounter-info-epilepsy.csv")
tail(df_util)
head(df_util)
# subset by case-control cohort
df_util <- df_util %>%
filter(PatientID %in% df_match1$PatientId)
# get date of birth from df_lookup and calculate age at encounter
df_util <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(ENC_DT = lubridate::as_date(ENC_DT)) %>%
mutate(AgeAtEncounter = difftime(ENC_DT, DateOfBirth, units = "days")) %>%
mutate(MonthsEncounter = as.numeric(round(AgeAtEncounter/30, 0))) %>%
mutate(YearsEncounter = as.numeric(AgeAtEncounter/365.2425))
# get count of unique specialty descriptions per patient
stats_util <- df_util %>%
group_by(PatientId) %>%
distinct(PatientId, SPECIALTY_DESC) %>%
count()
stats_util
### UTILIZATION ANALYSIS -------------------------------------------------------
## data: list of patient specialist encounters from Alina Ivaniuk, 2023-03-07
# TODO: update input data. current table omits rows as max file length has been reached.
df_util <- read_csv("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/encounter-info-epilepsy.csv")
length(unique(df_util$PatientID))
df_util
map_match
# get group label
df_util %>%
left_join(map_match)
df_util
### UTILIZATION ANALYSIS -------------------------------------------------------
## data: list of patient specialist encounters from Alina Ivaniuk, 2023-03-07
# TODO: update input data. current table omits rows as max file length has been reached.
df_util <- read_csv("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/encounter-info-epilepsy.csv")
# subset by case-control cohort
df_util <- df_util %>%
filter(PatientID %in% df_match1$PatientId)
# get date of birth from df_lookup and calculate age at encounter
df_util <- df_util %>%
rename(PatientId = PatientID) %>%
left_join(df_lookup[ ,c("PatientId", "DateOfBirth")], by = "PatientId") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(ENC_DT = lubridate::as_date(ENC_DT)) %>%
mutate(AgeAtEncounter = difftime(ENC_DT, DateOfBirth, units = "days")) %>%
mutate(MonthsEncounter = as.numeric(round(AgeAtEncounter/30, 0))) %>%
mutate(YearsEncounter = as.numeric(AgeAtEncounter/365.2425))
# get group label
df_util %>%
left_join(map_match)
# get group label
df_util <- df_util %>%
left_join(map_match)
# get count of unique specialty descriptions per patient
stats_util <- df_util %>%
group_by(group) %>%
distinct(PatientId, group, SPECIALTY_DESC) %>%
count()
stats_util
# get count of unique specialty descriptions per patient
stats_util <- df_util %>%
group_by(PatientId) %>%
distinct(PatientId, group, SPECIALTY_DESC) %>%
count()
stats_util
# get count of unique specialty descriptions per patient
stats_util <- df_util %>%
group_by(group) %>%
distinct(PatientId, group, SPECIALTY_DESC) %>%
count()
stats_util
# get count of unique specialty descriptions per patient
stats_util <- df_util %>%
group_by(PatientId) %>%
distinct(PatientId, group, SPECIALTY_DESC) %>%
count()
# get count of unique specialty descriptions per patient
# TODO: use number of unique specialties seen for PheIndex score instead of current assumption
stats_util <- df_util %>%
group_by(PatientId) %>%
distinct(PatientId, group, SPECIALTY_DESC) %>%
count()
stats_util
df_util %>%
group_by(PatientId) %>%
distinct(PatientId, group, SPECIALTY_DESC)  %>% view()
