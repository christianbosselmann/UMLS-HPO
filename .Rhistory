y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "jaccard")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "lin")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "cosine")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
df_clust1 <- split(df_match2, df_match2$PatientId)
ls_clust1 <- df_clust1 %>%
lapply(function(x){x <- x$term
x <- unique(x)})
# get group label
y_clust1 <- df_match2 %>%
distinct(PatientId, group) %>%
pull(group) %>%
as.factor()
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "resnik")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "lin")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "jaccard")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "cosine")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "euclidean")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# define cohorts and match by age, sex and ethnicity; maintain label
df_match <- df_genes %>%
left_join(df_person[,c("PatientId", "Gender", "Ethnicity", "median_age")], by = "PatientId") %>%
distinct(PatientId, Gender, Ethnicity, median_age, status)
# set covariates as factors
df_match <- df_match %>%
mutate(Gender = as.factor(Gender)) %>%
mutate(Ethnicity = as.factor(Ethnicity))
## Group 1: genetic vs. non-genetic
df_match1 <- df_match %>%
mutate(status = recode(status,
"nongenetic" = 0,
"genetic" = 1,
"scn1a" = 1,
"cdkl5" = 1))
## Group 2: SCN1A vs. Genetic
df_match2 <- df_match %>%
filter(status %in% c("genetic", "scn1a", "cdkl5")) %>%
mutate(status = recode(status,
"scn1a" = 1,
"genetic" = 0,
"cdkl5" = 0))
?matchit
df_match2 <- matchit(status ~ median_age + Ethnicity + Gender,
data = df_match2, ratio = 1,
method = "optimal", distance = "glm")
shelf(optmatch)
df_match2 <- matchit(status ~ median_age + Ethnicity + Gender,
data = df_match2, ratio = 1,
method = "optimal", distance = "glm")
df_match2
df_match2 <- match.data(df_match2)
df_match2
df_match2 <- df_match2 %>%
# merge in ConceptIDs
left_join(df[ ,c("PatientId", "ConceptID")], by = "PatientId") %>%
# merge in propagated HPO terms
left_join(hpo_map, by = "ConceptID") %>%
rename(term = name) %>%
left_join(prop_map, by = "term") %>%
select(-term) %>%
rename(term = prop_terms) %>%
na.omit %>%
unnest(cols = c(term)) %>%
# recode for later enrichment plots
rename(group = status) %>%
mutate(group = as.logical(group))
### EXPERIMENTAL: CLUSTERING AND NETWORK ANALYSIS -----------------------------
# make list where each element is a unique patient with a character vector of propagated HPO terms
df_clust1 <- split(df_match2, df_match2$PatientId)
ls_clust1 <- df_clust1 %>%
lapply(function(x){x <- x$term
x <- unique(x)})
# get group label
y_clust1 <- df_match2 %>%
distinct(PatientId, group) %>%
pull(group) %>%
as.factor()
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "resnik")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "lin")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "jaccard")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "cosine")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "euclidean")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
## Group 2: SCN1A vs. Genetic
df_match2 <- df_match %>%
filter(status %in% c("genetic", "scn1a", "cdkl5")) %>%
mutate(status = recode(status,
"scn1a" = 1,
"genetic" = 0,
"cdkl5" = 0))
df_match2 <- matchit(status ~ median_age + Ethnicity + Gender,
data = df_match2, ratio = 4,
method = "optimal", distance = "glm")
df_match2 <- match.data(df_match2)
df_match2 <- df_match2 %>%
# merge in ConceptIDs
left_join(df[ ,c("PatientId", "ConceptID")], by = "PatientId") %>%
# merge in propagated HPO terms
left_join(hpo_map, by = "ConceptID") %>%
rename(term = name) %>%
left_join(prop_map, by = "term") %>%
select(-term) %>%
rename(term = prop_terms) %>%
na.omit %>%
unnest(cols = c(term)) %>%
# recode for later enrichment plots
rename(group = status) %>%
mutate(group = as.logical(group))
### EXPERIMENTAL: CLUSTERING AND NETWORK ANALYSIS -----------------------------
# make list where each element is a unique patient with a character vector of propagated HPO terms
df_clust1 <- split(df_match2, df_match2$PatientId)
ls_clust1 <- df_clust1 %>%
lapply(function(x){x <- x$term
x <- unique(x)})
# get group label
y_clust1 <- df_match2 %>%
distinct(PatientId, group) %>%
pull(group) %>%
as.factor()
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "resnik")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "jaccard")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "lin")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "cosine")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
df_match2 <- matchit(status ~ median_age + Ethnicity + Gender,
data = df_match2, ratio = 4,
method = "full", distance = "glm")
## Group 2: SCN1A vs. Genetic
df_match2 <- df_match %>%
filter(status %in% c("genetic", "scn1a", "cdkl5")) %>%
mutate(status = recode(status,
"scn1a" = 1,
"genetic" = 0,
"cdkl5" = 0))
df_match2 <- matchit(status ~ median_age + Ethnicity + Gender,
data = df_match2, ratio = 4,
method = "full", distance = "glm")
df_match2 <- match.data(df_match2)
df_match2
df_match2 <- df_match2 %>%
# merge in ConceptIDs
left_join(df[ ,c("PatientId", "ConceptID")], by = "PatientId") %>%
# merge in propagated HPO terms
left_join(hpo_map, by = "ConceptID") %>%
rename(term = name) %>%
left_join(prop_map, by = "term") %>%
select(-term) %>%
rename(term = prop_terms) %>%
na.omit %>%
unnest(cols = c(term)) %>%
# recode for later enrichment plots
rename(group = status) %>%
mutate(group = as.logical(group))
df_clust1 <- split(df_match2, df_match2$PatientId)
ls_clust1 <- df_clust1 %>%
lapply(function(x){x <- x$term
x <- unique(x)})
# get group label
y_clust1 <- df_match2 %>%
distinct(PatientId, group) %>%
pull(group) %>%
as.factor()
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "resnik")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
# get pairwise phenotypic similarity
mat_clust1 <- pairwiseSimilarity(ls_clust1, ont_hpo, "lin")
# using Spectrum
spc <- Spectrum(mat_clust1,
showpca = FALSE,
method = 3,
fixk = 2,
dotsize = 1)
# assessment
y_hat <- spc$assignments %>% as.factor()
levels(y_hat) <- c(FALSE, TRUE)
accuracy_vec(truth = y_clust1, estimate = y_hat) # ACC
infotheo::mutinformation(y_clust1, y_hat, method = "emp") # MI
fossil::adj.rand.index(as.numeric(y_clust1), as.numeric(y_hat)) # ARI
# visualization
kpc <- kpca(as.kernelMatrix(mat_clust1), features = 2)
plot(rotated(kpc), col = y_hat, pch = 4,            # estimated classes (x)
xlab = "1st Principal Component", ylab = "2nd Principal Component")
points(rotated(kpc), col = y_clust1, pch = 5)       # true classes (<>)
