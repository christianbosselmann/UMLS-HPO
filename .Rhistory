tab3 -> tab4;
tab4 -> tab5;
p1 -> tab6;
p1 -> m1;
edge [dir=none]
tab5 -> p1;
edge [dir=back]
m2 -> p1
}
[1]: 'Any ICD-10 G40- for Epilepsy \\n n = 0000'
[2]: 'Any procedural code (CPT) for EEG \\n n = 0000'
[3]: 'Age 0-5 years at diagnosis \\n n = 0000'
[4]: 'Participants eligible for stratification \\n n = 1671'
[5]: 'Likely genetic patients n = 274 \\n Not likely genetic patients n = 1397'
[6]: 'Study cohort \\n n = 503'
[7]: 'Missing data \\n n = 25'
[8]: 'Total lost to matching \\n n = 1168'
")
library(DiagrammeRsvg)
## Flowchart of study population
librarian::shelf(DiagrammerR,
DiagrammeRsvg,
rsvg)
## Flowchart of study population
librarian::shelf(DiagrammeR,
DiagrammeRsvg,
rsvg)
options(OutDec = ".")
p_flowchart <- grViz("digraph flowchart {
node [fontname = Helvetica, shape = rectangle]
tab1 [label = '@@1']
tab2 [label = '@@2']
tab3 [label = '@@3']
tab4 [label = '@@4']
tab5 [label = '@@5']
tab6 [label = '@@6']
m1 [label = '@@7']
m2 [label = '@@8']
node [shape=none, width=0, height=0, label='']
p1;
{rank=same; p1,m1}
{rank=same; m2,p1}
# edge definitions with the node IDs
tab1 -> tab2;
tab2 -> tab3;
tab3 -> tab4;
tab4 -> tab5;
p1 -> tab6;
p1 -> m1;
edge [dir=none]
tab5 -> p1;
edge [dir=back]
m2 -> p1
}
[1]: 'Any ICD-10 G40- for Epilepsy \\n n = 0000'
[2]: 'Any procedural code (CPT) for EEG \\n n = 0000'
[3]: 'Age 0-5 years at diagnosis \\n n = 0000'
[4]: 'Participants eligible for stratification \\n n = 1671'
[5]: 'Likely genetic patients n = 274 \\n Not likely genetic patients n = 1397'
[6]: 'Study cohort \\n n = 503'
[7]: 'Missing data \\n n = 25'
[8]: 'Total lost to matching \\n n = 1168'
")
grViz(flowchart) %>%
export_svg %>%
charToRaw %>%
rsvg_pdf("study_flowchart.pdf")
grViz(p_flowchart) %>%
export_svg %>%
charToRaw %>%
rsvg_pdf("study_flowchart.pdf")
grViz(p_flowchart) %>%
export_svg %>%
charToRaw %>%
rsvg_pdf("studyflowchart.pdf")
grViz(p_flowchart) %>%
export_svg %>%
charToRaw %>%
rsvg_pdf("graph.pdf")
p_flowchart
p_flowchart %>%
export_svg %>%
charToRaw %>%
rsvg_pdf("studyflowchart.pdf")
?t.test
view(head(df_raw))
df_person
tbl_person
df_person
### SUMMARY STATS -------------------------------------------------------------
## demographic table
tbl_person <- df_person %>%
# can subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
# recode UMLS to sex
mutate(Gender = recode(Gender,
"C0086582" = "Male",
"C0086287" = "Female")) %>%
# recode UMLS to ethnicity
mutate(Ethnicity = recode(Ethnicity,
"C1518424" = "Not Hispanic or Latino",
"C1549625" = "Unknown",
"C5441846" = "Hispanic or Latino",
"None" = "Unknown")) %>%
summary_factorlist(dependent = "GENEPOS_comb",
explanatory = c("Gender", "Ethnicity", "ProcAge",
"min_age", "median_age", "max_age"),
p = TRUE, na_include = TRUE)  %>%
knitr::kable("html") %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
tbl_person
df_phenindex
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
summarize(kappa = yardstick::kap(group, bool_pheindex))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
summarize(kappa = yardstick::kap_vec(group, bool_pheindex))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
summarize(kappa = yardstick::kap(group, bool_pheindex))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
mutate(group = as.factor(group)) %>%
summarize(kappa = yardstick::kap(group, bool_pheindex))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
mutate(group = as.numeric(group)) %>%
summarize(kappa = yardstick::kap(group, bool_pheindex))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex <- df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE))
?yardstick::kap
yardstick::kap(df_phenindex, group, bool_pheindex)
yardstick::kap(df_phenindex, as.factor(group), as.factor(bool_pheindex))
df_phenindex
yardstick::kap(df_phenindex, factor(group, levels = c(T,F)),
factor(bool_pheindex), levels = c(T,F))
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex <- df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
mutate(group = factor(group, levels = c(T,F))) %>%
mutate(bool_pheindex = factor(bool_pheindex, levels = c(T,F)))
df_phenindex
yardstick::kap(df_phenindex, group, bool_pheindex)
df_phenindex
# calculate Cohen's Kappa between PheIndex score and our group label
df_phenindex <- df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
mutate(group = factor(group, levels = c(T,F))) %>%
mutate(bool_pheindex = factor(bool_pheindex, levels = c(T,F))) %>%
ungroup()
yardstick::kap(df_phenindex, group, bool_pheindex)
df_phenindex
table(group, bool_pheindex)
yardstick::mcc(df_phenindex, group, bool_pheindex)
yardstick::kap(df_phenindex, group, bool_pheindex)
view(df_phenindex)
# calculate Cohen's Kappa between PheIndex score and our group label
df_phe_kap <- df_phenindex %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
mutate(group = factor(group, levels = c(T,F))) %>%
mutate(bool_pheindex = factor(bool_pheindex, levels = c(T,F))) %>%
ungroup()
df_phenindex
## visualization: PhenIndex categories by group (id)
df_phenindex <- lapply(ls_pheindex, function(x){x <- x[,c("PatientId", "score")]}) %>%
rbindlist(idcol = "id") %>%
group_by(PatientId, id) %>%
summarize(score = sum(score)) %>%
left_join(map_match) %>%
na.omit
# PheIndex criteria pairwise similarity heatmap
df_phenindex <- df_phenindex %>%
mutate(id = as.factor(id))
df_phenindex
df_phenindex %>%
group_by(PatientId) %>%
summarize(score = sum(score))
?summarize
map_match
# calculate Cohen's Kappa between PheIndex score and our group label
df_phe_kap <- df_phenindex %>%
group_by(PatientId) %>%
summarize(score = sum(score)) %>%
left_join(map_match) %>%
mutate(bool_pheindex = if_else(score >= 2, TRUE, FALSE)) %>%
mutate(group = factor(group, levels = c(T,F))) %>%
mutate(bool_pheindex = factor(bool_pheindex, levels = c(T,F))) %>%
ungroup()
df_phe_kap
yardstick::kap(df_phe_kap, group, bool_pheindex)
view(df_phe_kap)
df_tsc
length(unique(df_tsc$PatientID))
df_match1 %>%
distinct(PatientId)
df_match1 %>%
distinct(PatientId) %>%
filter(PatientId %in% df_tsc$PatientID)
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
filter(PatientId %in% df_tsc$PatientID) %>%
count()
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
filter(PatientId %in% df_cdkl5$PatientID) %>%
count()
head(df_cdkl5)
map_match
df_match1
mrn_map
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
left_join(mrn_map) %>%
filter(PatientId %in% df_tsc$PatientID) %>%
count()
df_cdkl5
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
left_join(mrn_map) %>%
# filter(PatientId %in% df_tsc$PatientID) %>%
filter(MedicalRecordNumber %in% df_cdkl5$MRN) %>%
count()
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
left_join(mrn_map) %>%
filter(PatientId %in% df_scn1a$PatientID) %>%
# filter(MedicalRecordNumber %in% df_cdkl5$MRN) %>%
count()
head(df_scn1a)
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
left_join(mrn_map) %>%
# filter(PatientId %in% df_scn1a$PatientID) %>%
# filter(MedicalRecordNumber %in% df_cdkl5$MRN) %>%
filter(MedicalRecordNumber %in% df_scn1a$PAT_MRN_ID) %>%
count()
?matchit
table(df_match1$group)
length(unique(df_match1$PatientId))
length(unique(df_match1[df_match1$group == TRUE, ]$PatientId))
length(unique(df_match1[df_match1$group == FALSE, ]$PatientId))
length(unique(df_match1$ConceptID))
length(df_match1$ConceptID)
df_surv
p_surv
p_surv[[1]]
p_surv[[2]]
tmp <- ggplotify::as.ggplot(p_surv[[2]])
tmp
class(tmp)
class(p_surv[[2]])
cowplot::plot_grid(p_surv[[2]], p_pheindex_violin)
cowplot::plot_grid(p_surv, p_pheindex_violin)
cowplot::plot_grid(p_surv[[1]], p_surv[[2]], p_pheindex_violin, nrow = 2, label = "AUTO")
stats_followup
#
df_match1
stats_concepts
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID)
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
count()
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId)
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count()
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count()
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
sd
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count()
# average terms per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
# average UMLS concepts per patient
df_match1 %>%
distinct(PatientId, term) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
df_match1
# total number of encounters
df_match1 %>%
distinct(PatientId, ContactAge) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
# average UMLS concepts per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
6.54*503
p1$data
# follow-up stats for matched cohort
stats_followup2 <- p1$data %>%
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(mean = mean(dur), median = median(dur),
sd = sd(dur), min = min(dur), max = max(dur),
iqr = IQR(dur))
stats_followup2
p1$data %>%
filter(PatientId %in% df_match1$PatientId)
p1$data %>%
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower)
# follow-up stats for matched cohort
stats_followup2 <- p1$data %>%
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(sum(dur))
stats_followup2
8.94*503
4115/6.54
df
## p1: flag plot of encounters over age
p1 <- df %>%
# optional: subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
summarise(lower = min(ContactAge),
upper = max(ContactAge),
p = mean(ContactAge)) %>%
ggplot(aes(x = p, xmin = lower, xmax = upper,
y = reorder(PatientId, upper))) +
geom_linerange(size = 0.1) +
ylab("Individuals") +
xlab("Age at encounter (years)") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
coord_cartesian(xlim = c(0, 35), expand = FALSE) +
theme_classic() +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
# stats of length of follow-up
stats_followup <- p1$data %>%
# optional: subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(mean = mean(dur), median = median(dur),
sd = sd(dur), min = min(dur), max = max(dur),
iqr = IQR(dur))
# add mean age at follow-up back to plot
p1 <- p1 +
geom_vline(xintercept = stats_followup$mean, linetype = "dashed") +
geom_text(aes(x = stats_followup$mean, label = "\nMean: 6·5 years", y = 400),
colour = "black", angle = 90, size = 4)
p1
stats_followup
# add mean age at follow-up back to plot
p1 <- p1 +
geom_vline(xintercept = stats_followup$mean, linetype = "dashed") +
geom_text(aes(x = stats_followup$mean, label = "\nMean: 8·18 years", y = 400),
colour = "black", angle = 90, size = 4)
p1
## p1: flag plot of encounters over age
p1 <- df %>%
# optional: subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
summarise(lower = min(ContactAge),
upper = max(ContactAge),
p = mean(ContactAge)) %>%
ggplot(aes(x = p, xmin = lower, xmax = upper,
y = reorder(PatientId, upper))) +
geom_linerange(size = 0.1) +
ylab("Individuals") +
xlab("Age at encounter (years)") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
coord_cartesian(xlim = c(0, 35), expand = FALSE) +
theme_classic() +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
# stats of length of follow-up
stats_followup <- p1$data %>%
# optional: subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(mean = mean(dur), median = median(dur),
sd = sd(dur), min = min(dur), max = max(dur),
iqr = IQR(dur))
# add mean age at follow-up back to plot
p1 <- p1 +
geom_vline(xintercept = stats_followup$mean, linetype = "dashed") +
geom_text(aes(x = stats_followup$mean, label = "\nMean: 8·18 years", y = 400),
colour = "black", angle = 90, size = 4)
## p1: flag plot of encounters over age
p1 <- df %>%
# optional: subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
summarise(lower = min(ContactAge),
upper = max(ContactAge),
p = mean(ContactAge)) %>%
ggplot(aes(x = p, xmin = lower, xmax = upper,
y = reorder(PatientId, upper))) +
geom_linerange(size = 0.1) +
ylab("Individuals") +
xlab("Age at encounter (years)") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
coord_cartesian(xlim = c(0, 35), expand = FALSE) +
theme_classic() +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
# stats of length of follow-up
stats_followup <- p1$data %>%
# optional: subset to matched cohort
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(mean = mean(dur), median = median(dur),
sd = sd(dur), min = min(dur), max = max(dur),
iqr = IQR(dur))
# add mean age at follow-up back to plot
p1 <- p1 +
geom_vline(xintercept = stats_followup$mean, linetype = "dashed") +
geom_text(aes(x = stats_followup$mean, label = "\nMean: 8·18 years", y = 100),
colour = "black", angle = 90, size = 4)
p1
stats_followup
## Figure 1: Descriptive statistics of the study cohort.
Fig1 <- cowplot::plot_grid(p1,
p2 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p3 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p5 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
pt,
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig1.pdf",
width = 12,
height = 8)
Fig1
dev.off()
pqg
V(g2)
vec_min
V(g2)[vec_min]$label
df_desc$pvalue
stats_er
p_er
plong1f$plot$data %>%
ungroup() %>%
# get each combination of bin and term
mutate(bin = replace_na(bin, 99)) %>%
mutate(bin = as.factor(bin)) %>%
complete(bin, description) %>%
group_by(description) %>%
mutate(term = unique(term[!is.na(term)])) %>%
ungroup() %>%
# select terms of interest from discovery graph (plong) and filter by significance
filter(term %in% vec_longterms) %>%
mutate(odds = ifelse(pvalue > 0.05, NA, odds)) %>%
# set facet groups
mutate(fct_group = case_when(
term %in% vec_caseterms ~ "Likely genetic",
term %in% vec_controlterms ~ "Non-genetic")) %>%
# set description factor levels
mutate(description = as.factor(description)) %>%
mutate(description = factor(description, levels = levels(description)[dist_clust$order]))  %>% view()
view(plong1f$plot$data)
dist_ls
plong1f$plot_or
view(plong1f$plot_or$data)
view(plong1f$plot$data)
plong1f$data
