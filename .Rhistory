theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(fill, value), y = terms_absolute, fill = fill)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(fill, terms_absolute), y = terms_absolute, fill = fill)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(fill, -terms_absolute), y = terms_absolute, fill = fill)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
view(df_stats)
# plot
ggplot(df_stats, aes(x = reorder(fill, -sum(terms_absolute)), y = terms_absolute, fill = fill)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(fill, -terms_absolute), y = terms_absolute, fill = fill)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# pkg
library(librarian)
librarian::shelf(tidyverse,
ggrepel,
ontologyIndex,
data.table)
# helper fn
source("func.R")
# load ontology
ont_hpo <- get_ontology("hp.obo.txt",
propagate_relationships = "is_a",
extract_tags = "everything")
# data
# diagnosis from all encounters for two years before day of most recent surgery
df <- read_csv("SurgeryData.csv") %>%
select(Surgery, ConceptID)
# manual map
hpo_map <- lapply(ont_hpo$xref, function(x){
x <- x[x %like% "UMLS:"]
x <- sub('.*\\:', '', x)
})
hpo_map <- enframe(hpo_map) %>%
unnest(value) %>%
rename(ConceptID = value)
desc_map <- tibble(term = ont_hpo$id,
description = ont_hpo$name)
### CLEAN DATA ----------------------------------------------------------------
# fix broken labels
df <- df %>%
dplyr::mutate(Surgery = recode(Surgery,
"Temporal Lobectomy" = "Temporal lobectomy",
"Cental resection" = "Central resection",
"other" = "Other",
"SD/grids" = "SD grids",
"VNS lead revision" = "VNS revision",
"VNS lead removal" = "VNS removal",
"VNS Removal" = "VNS removal",
"VNS implantation" = "VNS insertion",
"Depth electrodes" = "SEEG"))
# list for HPO analysis
ls <- split(df, df$Surgery, df$ConceptID)
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(surgery = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
)))))))))))
df_stats
# plot
ggplot(df_stats, aes(x = reorder(surgery, -terms_absolute), y = terms_absolute, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -terms_absolute), y = terms_absolute)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -terms_absolute), y = terms_absolute, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
head(df_stats)
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
)))))))))))
head(df_stats)
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(surgery) %>%
summarise()
df_stats
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(surgery) %>%
summarise(terms_absolute)
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(surgery) %>%
summarise(terms_absolute)
df_stats
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(fill) %>%
summarise(terms_absolute, terms_unique)
df_stats
?summarise
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(fill) %>%
dplyr::summarise(terms_absolute, terms_unique)
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(fill) %>%
dplyr::summarise(terms_absolute, terms_unique)
df_stats
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(fill) %>%
dplyr::summarise(terms_absolute, terms_unique, .groups = "rowwise")
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(fill = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(fill) %>%
dplyr::summarise(terms_absolute, terms_unique, .groups = "rowwise")
df_stats
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(surgery = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(surgery) %>%
dplyr::summarise(terms_absolute, terms_unique, .groups = "rowwise")
# plot
ggplot(df_stats, aes(x = reorder(surgery, -terms_absolute), y = terms_absolute, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$terms_absolute)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
df_stats
# custom fill groups
df_stats <- df_stats %>% mutate(surgery = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(surgery) %>%
dplyr::summarise(n_abs = sum(terms_absolute), n_uniq = sum(terms_unique))
df_stats
### DESCRIPTIVE STATS ---------------------------------------------------------
# absolute number and unique concepts per group
df_stats <- tibble(surgery = names(ls),
terms_absolute = sapply(ls, function(x) {nrow(x)}),
terms_unique = sapply(ls, function(x) {x$ConceptID %>% unique %>% length}))
# custom fill groups
df_stats <- df_stats %>% mutate(surgery = ifelse(surgery %in% c("Temporal lobectomy"), "Temporal lobectomy",
ifelse(surgery %in% c("Frontal lobectomy", "Occipital lobectomy", "Parietal lobectomy"), "Extratemporal lobectomy",
ifelse(surgery %in% c("Insular resection", "Central resection", "Multilobar resection"), "Resection, other",
ifelse(surgery %in% c("Laser ablation"), "Laser ablation",
ifelse(surgery %in% c("Hemispherectomy"), "Hemispherectomy",
ifelse(surgery %in% c("Callosotomy"), "Callosotomy",
ifelse(surgery %in% c("VNS", "VNS insertion", "VNS removal", "VNS revision"), "VNS",
ifelse(surgery %in% c("DBS", "Generator implantation", "Explantation of NeuroPace", "NeuroPace"), "Neurostimulation, other",
ifelse(surgery %in% c("SD grids", "Other - Plates", "SEEG"), "SD/SEEG",
ifelse(surgery %in% c("Other", "Other - Shunt", "Other-Ventriculostomy"), "Other", "Other"
))))))))))) %>%
group_by(surgery) %>%
dplyr::summarise(n_abs = sum(terms_absolute), n_uniq = sum(terms_unique))
df_stats
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
?scale_color_brewer
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_color_brewer("Paired", 9) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired", 9) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
# theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("RdBu") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = surgery, y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_discrete("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
brewer
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer("Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
shelf(scales)
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concepts") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concepts (absolute)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
sapply(ls, function(x) {nrow(x)})
ls
ggplot(df_stats, aes(x = reorder(surgery, -n_uniq), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_uniq)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (unique)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
head(df_stats)
ggplot(df_stats, aes(x = reorder(surgery, -n_uniq), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
# coord_cartesian(ylim = c(0, max(df_stats$n_uniq)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (unique)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
ggplot(df_stats, aes(x = reorder(surgery, -n_uniq), y = n_uniq, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_uniq)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (unique)") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (absolute)") +
xlab("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (absolute)") +
xlab("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
legend.position = "none")
ggplot(df_stats, aes(x = reorder(surgery, -n_uniq), y = n_uniq, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_uniq)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (unique)") +
xlab("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
# plot
ggplot(df_stats, aes(x = reorder(surgery, -n_abs), y = n_abs, fill = surgery)) +
geom_bar(stat = "identity") +
coord_cartesian(ylim = c(0, max(df_stats$n_abs)), expand = FALSE) +
scale_fill_brewer(palette = "Paired") +
scale_y_continuous(label = comma, "Concept IDs (absolute)") +
xlab("") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
