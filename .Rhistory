mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p_asm
### MEDICATION ANALYSIS -------------------------------------------------------
## Data and Preprocessing
# load data: list of patient medical record IDs and prescriptions
df_asm <-  readxl::read_excel("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/Medication_history.xlsx") %>%
filter(MED_PHARM_CLASS_DESC %like% "ANTICONVULSANT")
# load data: FDA NDC database
df_fda <- readxl::read_excel("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/ndcxls.xlsx")
df_fda <- df_fda[df_fda$PHARM_CLASSES %like% "epilept", ] %>%
distinct(PROPRIETARYNAME, NONPROPRIETARYNAME)
# source: AES Summary of Antiseizure Medications Available in the United States: 2020 Update
# https://www.aesnet.org/docs/default-source/pdfs-clinical/2020-september-aes_summary_of_asms.pdf?sfvrsn=c1a0ed0b_2
asm_vec <- readxl::read_excel("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/ASM list.xlsx", col_names = FALSE) %>%
pull()
# match by AES and FDA lookup tables
for(i in 1:length(asm_vec)){
ind_asm <- agrep(pattern = asm_vec[[i]],
x = df_asm$MED_NAME,
max.distance = 1,
ignore.case = TRUE)
df_asm[ind_asm,]$MED_NAME <- asm_vec[[i]]
}
for(i in 1:nrow(df_fda)){
ind_asm <- agrep(pattern = df_fda$PROPRIETARYNAME[[i]],
x = df_asm$MED_NAME,
max.distance = 1,
ignore.case = TRUE)
df_asm[ind_asm,]$MED_NAME <- df_fda$NONPROPRIETARYNAME[[i]]
}
# manual recoding
vec_asm <- df_asm %>%
mutate(MED_NAME = case_when(str_detect(MED_NAME, regex('vimpat', ignore_case = T)) ~ 'lacosamide',
str_detect(MED_NAME, regex('lacosamide', ignore_case = T)) ~ 'lacosamide',
str_detect(MED_NAME, regex('banzel', ignore_case = T)) ~ 'rufinamide',
str_detect(MED_NAME, regex('tegretol', ignore_case = T)) ~ 'carbamazepine',
str_detect(MED_NAME, regex('carbatrol', ignore_case = T)) ~ 'carbamazepine',
str_detect(MED_NAME, regex('topamax', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('topiram', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('qudexy', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('trokendi', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('eprontia', ignore_case = T)) ~ 'topiramate',
str_detect(MED_NAME, regex('spritam', ignore_case = T)) ~ 'levetiracetam',
str_detect(MED_NAME, regex('keppra', ignore_case = T)) ~ 'levetiracetam',
str_detect(MED_NAME, regex('levetir', ignore_case = T)) ~ 'levetiracetam',
str_detect(MED_NAME, regex('sympazan', ignore_case = T)) ~ 'clobazam',
str_detect(MED_NAME, regex('onfi', ignore_case = T)) ~ 'clobazam',
str_detect(MED_NAME, regex('loraze', ignore_case = T)) ~ 'lorazepam',
str_detect(MED_NAME, regex('midazol', ignore_case = T)) ~ 'midazolam',
str_detect(MED_NAME, regex('nayzilam', ignore_case = T)) ~ 'midazolam',
str_detect(MED_NAME, regex('klonopin', ignore_case = T)) ~ 'clonazepam',
str_detect(MED_NAME, regex('lyrica', ignore_case = T)) ~ 'pregabalin',
str_detect(MED_NAME, regex('pregabalin', ignore_case = T)) ~ 'pregabalin',
str_detect(MED_NAME, regex('zonis', ignore_case = T)) ~ 'zonisamide',
str_detect(MED_NAME, regex('zoneg', ignore_case = T)) ~ 'zonisamide',
str_detect(MED_NAME, regex('valtoco', ignore_case = T)) ~ 'diazepam',
str_detect(MED_NAME, regex('diastat', ignore_case = T)) ~ 'diazepam',
str_detect(MED_NAME, regex('valpro', ignore_case = T)) ~ 'valproic acid',
str_detect(MED_NAME, regex('depak', ignore_case = T)) ~ 'valproic acid',
str_detect(MED_NAME, regex('lacosamide', ignore_case = T)) ~ 'lacosamide',
str_detect(MED_NAME, regex('fycompa', ignore_case = T)) ~ 'perampanel',
str_detect(MED_NAME, regex('perampanel', ignore_case = T)) ~ 'perampanel',
str_detect(MED_NAME, regex('fintepla', ignore_case = T)) ~ 'fintepla',
str_detect(MED_NAME, regex('fenfluramine', ignore_case = T)) ~ 'fenfluramine',
str_detect(MED_NAME, regex('lamot', ignore_case = T)) ~ 'lamotrigine',
str_detect(MED_NAME, regex('oxc', ignore_case = T)) ~ 'oxcarbazepine',
str_detect(MED_NAME, regex('trileptal', ignore_case = T)) ~ 'oxcarbazepine',
str_detect(MED_NAME, regex('loraz', ignore_case = T)) ~ 'lorazepam',
str_detect(MED_NAME, regex('vigabatr', ignore_case = T)) ~ 'vigabatrin',
str_detect(MED_NAME, regex('tiagab', ignore_case = T)) ~ 'tiagabine',
str_detect(MED_NAME, regex('rufinam', ignore_case = T)) ~ 'rufinamide',
str_detect(MED_NAME, regex('primid', ignore_case = T)) ~ 'primidone',
str_detect(MED_NAME, regex('phenyt', ignore_case = T)) ~ 'phenytoin',
str_detect(MED_NAME, regex('phenobarb', ignore_case = T)) ~ 'phenobarbital',
str_detect(MED_NAME, regex('gabapent', ignore_case = T)) ~ 'gabapentin',
str_detect(MED_NAME, regex('felbamat', ignore_case = T)) ~ 'felbamate',
str_detect(MED_NAME, regex('everol', ignore_case = T)) ~ 'everolimus',
str_detect(MED_NAME, regex('ethosux', ignore_case = T)) ~ 'ethosumixide',
str_detect(MED_NAME, regex('zaront', ignore_case = T)) ~ 'ethosumixide',
str_detect(MED_NAME, regex('cenoba', ignore_case = T)) ~ 'cenobamate',
str_detect(MED_NAME, regex('xcopri', ignore_case = T)) ~ 'cenobamate',
str_detect(MED_NAME, regex('cannab', ignore_case = T)) ~ 'cannabidiol',
str_detect(MED_NAME, regex('epidiolex', ignore_case = T)) ~ 'cannabidiol',
str_detect(MED_NAME, regex('briv', ignore_case = T)) ~ 'brivaracetam',
str_detect(MED_NAME, regex('stiri', ignore_case = T)) ~ 'stiripentol',
str_detect(MED_NAME, regex('celontin', ignore_case = T)) ~ 'mesuximide',
str_detect(MED_NAME, regex('eslicarbazepine', ignore_case = T)) ~ 'eslicarbazepine acetate')) %>%
pull(MED_NAME)
# merge matches, drop non-matched rows and unneeded columns
df_asm$MED_NAME <- vec_asm
df_asm <- df_asm[df_asm$MED_NAME %in% asm_vec, ] %>%
select(MedicalRecordNumber, MED_NAME, MED_START_DATE, ORD_MODE_DESC)
# merge in Patient Ids and DOB by MRN, fix date
df_lookup <- df_raw %>%
distinct(PatientId, MedicalRecordNumber, DateOfBirth)
df_med <- df_asm %>%
left_join(df_lookup[ ,c("PatientId", "MedicalRecordNumber", "DateOfBirth")], by = "MedicalRecordNumber") %>%
mutate(DateOfBirth = lubridate::mdy(DateOfBirth)) %>%
mutate(MED_START_DATE = lubridate::as_date(MED_START_DATE)) %>%
mutate(AgePrescription = difftime(MED_START_DATE, DateOfBirth, units = "days")) %>%
mutate(MonthsPrescription = as.numeric(round(AgePrescription/30, 0))) %>%
mutate(YearsPrescription = as.numeric(AgePrescription/365.2425))
# mutate(YearsPrescription = as.numeric(round(AgePrescription/365, 0)))
## Descriptive stats
df_med <- df_med %>%
group_by(PatientId) %>%
mutate(n_unique_asm = n_distinct(MED_NAME)) %>% # number of unique ASMs per patient
mutate(n_all_prescriptions = n_distinct(MonthsPrescription)) # number of all prescriptions per patient
## Group analysis: Heatmap (OR)
# define ASM groups, cf. doi.org/10.1007/s40263-021-00827-8
asm_map <- tibble(MED_NAME = asm_vec,
MED_GROUP = NA) %>%
mutate(MED_GROUP = case_when(
str_detect(MED_NAME, regex('felbam', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('valpr', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('hormon', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('zonis', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('rufin', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('cannab', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('cenob', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('topira', ignore_case = T)) ~ 'Mixed/unknown',
str_detect(MED_NAME, regex('phenyt', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('carbamaz', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('carbaz', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('lamotr', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('lacosam', ignore_case = T)) ~ 'Na',
str_detect(MED_NAME, regex('suxim', ignore_case = T)) ~ 'Ca',
str_detect(MED_NAME, regex('gabap', ignore_case = T)) ~ 'Ca',
str_detect(MED_NAME, regex('pregabal', ignore_case = T)) ~ 'Ca',
str_detect(MED_NAME, regex('phenobarb', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('primidon', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('stirip', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('azol', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('azepam', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('clobaz', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('tiaga', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('vigabatr', ignore_case = T)) ~ 'GABA',
str_detect(MED_NAME, regex('peramp', ignore_case = T)) ~ 'AMPA',
str_detect(MED_NAME, regex('brivara', ignore_case = T)) ~ 'SV2A',
str_detect(MED_NAME, regex('levetir', ignore_case = T)) ~ 'SV2A',
str_detect(MED_NAME, regex('fenfl', ignore_case = T)) ~ '5-HT',
str_detect(MED_NAME, regex('everol', ignore_case = T)) ~ 'MTOR'
) )
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# define bins
mutate(YearsPrescription = cut_number(YearsPrescription, 4)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
filter(freqY > 0.01 & freqN > 0.01)
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p_asm
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# define bins
mutate(YearsPrescription = cut_number(YearsPrescription, 4)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
filter(freqY+freqN > 0.01)
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p_asm
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# define bins
mutate(YearsPrescription = cut_number(YearsPrescription, 4)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
filter(freqY+freqN > 0.05)
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p-asm
p_asm
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# define bins
mutate(YearsPrescription = cut_number(YearsPrescription, 4)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
filter(freqY+freqN > 0.02)
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p_asm
# take strict matched case-control set
df_heatmap <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# define bins
mutate(YearsPrescription = cut_number(YearsPrescription, 4)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# merge in group description for facets
left_join(asm_map, by = "MED_NAME") %>%
# define factor levels
mutate(MED_NAME = factor(MED_NAME, levels = sort(unique(asm_vec)))) %>%
# frequency filter
ungroup() %>%
mutate(freqY = Y/max(Y)) %>%
mutate(freqN = N/max(N)) %>%
filter(freqY > 0.01 & freqN > 0.01)
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p_asm
# plot
p_asm <- df_heatmap %>%
mutate(MED_NAME = str_to_title(MED_NAME)) %>%
ggplot(aes(x = YearsPrescription,
y = MED_NAME,
fill = log10(OR))) +
geom_tile(color = "black") +
geom_text(aes(label = round(OR, 1)), size = 4) +
theme_classic() +
facet_grid(MED_GROUP~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age (years)") +
scale_x_discrete(labels = c("0-2", "2-4", "4-8", ">8")) +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
p_asm
### Figure 6: Prescription patterns of genetic vs. non-genetic patients
pdf(file = "/Users/cbosselmann/Desktop/GitHub/UMLS-HPO/out/pub_genetic/Fig6.pdf",
width = 8,
height = 12)
p_asm
dev.off()
### Figure 6: Prescription patterns of genetic vs. non-genetic patients
pdf(file = "/Users/cbosselmann/Desktop/GitHub/UMLS-HPO/out/pub_genetic/Fig6.pdf",
width = 8,
height = 8)
p_asm
dev.off()
view(df_heatmap)
