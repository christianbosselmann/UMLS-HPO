}
res <- cbind(input, concept_odds)
return(res)
}
tmp <- getCI(enrich1$data)
view(tmp)
tmp %>% filter(description == "behavioural abnormality")
head(tmp)
tmp %>% filter(description == "Behavioural abnormality")
tmp %>% filter(description == "Behavioral abnormality")
tmp %>% filter(description == "Hyperactivity")
tmp %>% filter(description == "Febrile seizures")
tmp %>% filter(description == "Febrile seizure")
tmp %>% filter(description %like% "Febrile seizure")
tmp %>% filter(description %like% "cerebral h")
tmp %>% filter(description %like% "haemorrh")
tmp %>% filter(description %like% "hemorrh")
tmp <- getCI(plong1f$plot$data)
head(plong1f$plot)
head(plong1f$plot$data)
show_legend = "none"
fix_x = 25
odds_plot = FALSE
filter = TRUE
res <- list()
# create age bins
df_g1 <- df_genes %>%
# subgroup by matched patients
filter(PatientId %in% df_match1$PatientId) %>%
# get group label
left_join(df_match1[ ,c("PatientId", "group")] %>% unique, by = "PatientId") %>%
ungroup() %>%
## bin width based on encounter frequency
# mutate(bin = cut_number(ContactAge, n = 10))
## fixed bin width
mutate(bin = cut(ContactAge, breaks = c(0, 2, 12, 18, Inf)))
# get numeric breaks for histogram
breaks_binned <- levels(df_g1$bin) %>%
sapply(., function(x) {gsub("\\,", " ", x)}) %>%
parse_number()
breaks_binned <- c(breaks_binned, max(df_g1$ContactAge))
# split into age bins
ls_g1 <- df_g1 %>%
split(.$bin)
# for each bin, map to HPO terms, then map to propagated HPO terms
ls_m1 <- list()
for(i in 1:length(ls_g1)){
ls_m1[[i]] <- left_join(ls_g1[[i]], hpo_map, by = "ConceptID") %>%
rename(term = name) %>%
na.omit()
ls_m1[[i]] <- left_join(ls_m1[[i]], prop_map, by = "term")
}
# count of each genetic subgroup
# run Fisher's test
# get n most significant terms per bin
ls_p1 <- list()
for(i in 1:length(ls_m1)){
# check if bin contains observations for both groups
# this is not the case, skip this bin
if(length(table(ls_m1[[i]]$group)) == 1){next}
df_group <- ls_m1[[i]] %>%
select(PatientId, group, prop_terms) %>%
unnest(cols = c(prop_terms)) %>%
group_by(prop_terms, group) %>%
count(prop_terms) %>%
pivot_wider(names_from = group, values_from = n) %>%
replace(is.na(.), 0) %>%
rename(term = prop_terms,
Y = `TRUE`,
N = `FALSE`)
# merge in description
df_group <- left_join(df_group, desc_map, by = "term")
# df_group can also be used for enrichment plots
df_group <- df_group %>%
mutate(Y_out = max(df_group$Y)-Y,
N_out = max(df_group$N)-N) %>%
mutate(pvalue = fish_test_it(Y, Y_out, N, N_out, "pvalue"),
odds = fish_test_it(Y, Y_out, N, N_out, "odds"),
freq1 = Y/max(df_group$Y),
freq2 = N/max(df_group$N),
color_sig = ifelse(p.adjust(pvalue, "bonferroni") < 0.05, "<", ">"),
size_sel = -log10(pvalue)*4) %>%
ungroup() %>%
mutate(pvalue = p.adjust(pvalue, "bonferroni"))
if(filter){
# filter by positive ORs: we only want observations for the cases
df_group <- df_group %>%
filter(odds > 1)
}
# get n best p-values for each bin for longitudinal plot
df_group <- df_group %>%
ungroup() %>%
select(term, description, pvalue, odds)
# %>%
#   slice_min(order_by = pvalue, n = 8, with_ties = FALSE) # non-trivial to choose
if(filter){
# filter: by ancestors
min_set <- ontologyIndex::minimal_set(ont_hpo, df_group$term)
df_group <- df_group[df_group$term %in% min_set, ]
}
# return
ls_p1[[i]] <- df_group
}
df_group
ls_p1
#' Plot function for p-value of HPO terms over age, for 01-genetics.R
#' @param df_genes df with cols PatientId, ConceptID, ContactAge, ProcAge, status
#' @param df_match1 df subset after matching procedure with column group for cohort membership
#' @param show_legend ggplot2 legend.position, allowed are: “left”, “top”, “right”, “bottom”.
#' @param fix_x int; fixed x-axis length
#' @param odds_plot logical flag; if true, generate the plot with OR y-axis
#' @param filter logical flag; if true, only keep the term in the bin with the highest p-value
#' @return res list of longitudinal plot
longitudinalPlot <- function(df_genes, df_match1,
show_legend = "none", fix_x = 25,
odds_plot = FALSE,
filter = TRUE){
res <- list()
# create age bins
df_g1 <- df_genes %>%
# subgroup by matched patients
filter(PatientId %in% df_match1$PatientId) %>%
# get group label
left_join(df_match1[ ,c("PatientId", "group")] %>% unique, by = "PatientId") %>%
ungroup() %>%
## bin width based on encounter frequency
# mutate(bin = cut_number(ContactAge, n = 10))
## fixed bin width
mutate(bin = cut(ContactAge, breaks = c(0, 2, 12, 18, Inf)))
# get numeric breaks for histogram
breaks_binned <- levels(df_g1$bin) %>%
sapply(., function(x) {gsub("\\,", " ", x)}) %>%
parse_number()
breaks_binned <- c(breaks_binned, max(df_g1$ContactAge))
# split into age bins
ls_g1 <- df_g1 %>%
split(.$bin)
# for each bin, map to HPO terms, then map to propagated HPO terms
ls_m1 <- list()
for(i in 1:length(ls_g1)){
ls_m1[[i]] <- left_join(ls_g1[[i]], hpo_map, by = "ConceptID") %>%
rename(term = name) %>%
na.omit()
ls_m1[[i]] <- left_join(ls_m1[[i]], prop_map, by = "term")
}
# count of each genetic subgroup
# run Fisher's test
# get n most significant terms per bin
ls_p1 <- list()
for(i in 1:length(ls_m1)){
# check if bin contains observations for both groups
# this is not the case, skip this bin
if(length(table(ls_m1[[i]]$group)) == 1){next}
df_group <- ls_m1[[i]] %>%
select(PatientId, group, prop_terms) %>%
unnest(cols = c(prop_terms)) %>%
group_by(prop_terms, group) %>%
count(prop_terms) %>%
pivot_wider(names_from = group, values_from = n) %>%
replace(is.na(.), 0) %>%
rename(term = prop_terms,
Y = `TRUE`,
N = `FALSE`)
# merge in description
df_group <- left_join(df_group, desc_map, by = "term")
# df_group can also be used for enrichment plots
df_group <- df_group %>%
mutate(Y_out = max(df_group$Y)-Y,
N_out = max(df_group$N)-N) %>%
mutate(pvalue = fish_test_it(Y, Y_out, N, N_out, "pvalue"),
odds = fish_test_it(Y, Y_out, N, N_out, "odds"),
freq1 = Y/max(df_group$Y),
freq2 = N/max(df_group$N),
color_sig = ifelse(p.adjust(pvalue, "bonferroni") < 0.05, "<", ">"),
size_sel = -log10(pvalue)*4) %>%
ungroup() %>%
mutate(pvalue = p.adjust(pvalue, "bonferroni"))
if(filter){
# filter by positive ORs: we only want observations for the cases
df_group <- df_group %>%
filter(odds > 1)
}
# # get n best p-values for each bin for longitudinal plot
# df_group <- df_group %>%
#   ungroup() %>%
#   select(term, description, pvalue, odds)
# # %>%
# #   slice_min(order_by = pvalue, n = 8, with_ties = FALSE) # non-trivial to choose
if(filter){
# filter: by ancestors
min_set <- ontologyIndex::minimal_set(ont_hpo, df_group$term)
df_group <- df_group[df_group$term %in% min_set, ]
}
# return
ls_p1[[i]] <- df_group
}
# fix bin to correspond to mean age of bin for graph
seq <- seq(1, length(breaks_binned), 1)
breaks_mean <- sapply(seq, function(i) {mean(breaks_binned[i:(i+1)])}) %>%
na.omit
names(ls_p1) <- breaks_mean[1:length(ls_p1)]
df_gp1 <- ls_p1 %>%
rbindlist(idcol = "bin") %>%
mutate(bin = as.numeric(bin))
# filter: for each term, keep only the bin with the highest p-value
if(filter){
df_gp1 <- df_gp1 %>%
group_by(term) %>%
slice_min(order_by = pvalue, n = 1)
# filter: only needed if we include many or insignificant variables
# only keep description labels for n top pvalues per bin
# these still have to be significant
top_labels <- df_gp1 %>%
group_by(bin) %>%
slice_min(order_by = pvalue, n = 2) %>%
filter(pvalue < 0.05)
df_gp1 <- df_gp1 %>%
group_by(bin) %>%
mutate(description = ifelse(description %in% top_labels$description, description, NA))
} # end filter
# point plot: log10(pvalue) over age bins
# here we can just plot genetic vs non-genetic as sanity check for the subanalysis
palette <- colorRampPalette(RColorBrewer::brewer.pal(9, name = 'RdBu'))(length(breaks_mean))
res$plot <- df_gp1 %>%
ggplot(aes(x = bin, y = -log10(pvalue), fill = factor(bin, levels = breaks_mean))) +
geom_point() +
geom_jitter() +
geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
geom_label_repel(aes(label = description), size = 3.0,
color = "black", max.overlaps = Inf,
force_pull = 0.01,
min.segment.length = 0) +
scale_fill_manual(values = palette,
name = "Mean age (years)",
breaks = breaks_mean,
labels = format(round(breaks_mean, 3), nsmall = 1),
guide = guide_legend(override.aes = list(label = ""))) +
scale_x_continuous(expand = expand_scale(mult = c(0.1, 0.1))) +
scale_y_continuous(expand = expand_scale(mult = c(0, 0.1))) +
theme_classic() +
theme(legend.position = show_legend) +
coord_cartesian(xlim = c(0, fix_x)) +
xlab("Age (years)")
# OR plot
if(odds_plot){
res$plot_or <- df_gp1 %>%
ggplot(aes(x = bin, y = odds, fill = factor(bin, levels = breaks_mean))) +
geom_point() +
geom_jitter() +
geom_label_repel(aes(label = description), size = 3.0,
color = "black", max.overlaps = Inf,
force_pull = 0.01,
min.segment.length = 0) +
scale_fill_manual(values = palette,
name = "Mean age (years)",
breaks = breaks_mean,
labels = format(round(breaks_mean, 3), nsmall = 1),
guide = guide_legend(override.aes = list(label = ""))) +
theme_classic() +
theme(legend.position = show_legend) +
coord_cartesian(xlim = c(0, fix_x)) +
xlab("Age (years)") +
ylab("Odds ratio (censored, log scale)") +
scale_x_continuous(expand = expand_scale(mult = c(0.1, 0.1))) +
scale_y_continuous(oob = scales::oob_squish_infinite,
trans = scales::log_trans(base = 10),
expand = expand_scale(mult = c(0, .1)))
}
return(res)
}
### LONGITUDINAL ANALYSIS -----------------------------------------------------
plong1f <- longitudinalPlot(df_genes, df_match1, odds_plot = TRUE, filter = FALSE)
pheat1 <- plong1f$plot$data %>%
ungroup() %>%
# get each combination of bin and term
mutate(bin = replace_na(bin, 99)) %>%
mutate(bin = as.factor(bin)) %>%
complete(bin, description) %>%
group_by(description) %>%
mutate(term = unique(term[!is.na(term)])) %>%
ungroup() %>%
# select terms of interest from discovery graph (plong) and filter by significance
filter(term %in% vec_longterms) %>%
mutate(odds = ifelse(pvalue > 0.05, NA, odds)) %>%
# set facet groups
mutate(fct_group = case_when(
term %in% vec_caseterms ~ "Likely genetic",
term %in% vec_controlterms ~ "Non-genetic")) %>%
# set description factor levels
mutate(description = as.factor(description)) %>%
mutate(description = factor(description, levels = levels(description)[dist_clust$order])) %>%
# plot
ggplot(aes(x = as.factor(bin),
y = description,
fill = log10(odds))) +
geom_tile(color = "black") +
geom_text(aes(label = round(odds, 1)), size = 4) +
theme_classic() +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
facet_grid(fct_group~., scales = "free_y", space = "free",
switch = "y", drop = FALSE, margins = FALSE) +
theme(strip.placement = "outside",
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.2, "cm")) +
ylab("") +
xlab("Age at encounter (years)") +
scale_x_discrete(labels = c("0-2", "2-12", "12-18", ">18")) +
scale_fill_gradient2(name = "OR",
labels = c("0", "", "1", "", "Inf"),
low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0,
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::oob_squish_any)
pheat1
plong1f$plot
plong1f$plot$data
tmp <- getCI(plong1f$plot$data)
tmp %>% filter(bin == 1) %>% filter(description %like% "cerebral h")
tmp %>% filter(bin == 1) %>% filter(description %like% "All")
tmp %>% filter(bin == 1) %>% filter(description %like% "recurr")
tmp %>% filter(bin == 2) %>% filter(description %like% "recurr")
tmp %>% filter(bin == 7) %>% filter(description %like% "recurr")
tmp %>% filter(bin == 7) %>% filter(description %like% "inf")
tmp %>% filter(bin == 7) %>% filter(description %like% "Recurrent")
tmp %>% filter(bin == 7) %>% filter(description %like% "Feed")
tmp %>% filter(bin == 7) %>% filter(description %like% "constip")
tmp %>% filter(bin == 7) %>% filter(description %like% "Constip")
tmp %>% filter(bin == 7) %>% filter(description %like% "Dehydr")
tmp %>% filter(bin == 1) %>% filter(description %like% "hemorr")
tmp %>% filter(bin == 1) %>% filter(description %like% "Mening")
tmp %>% filter(bin == 1) %>% filter(description %like% "Renal in")
table(tmp$bin)
tmp %>% filter(bin == NA) %>% filter(description %like% "Renal in")
tmp %>% filter(bin == NA) %>% filter(description %like% "R")
tmp %>% filter(bin == NA) %>% filter(description %like% "e")
tmp %>% filter(is.na(bin)) %>% filter(description %like% "e")
tmp %>% filter(is.na(bin)) %>% filter(description %like% "Osteopo")
## Figure 2: Genetic vs. Non-Genetic
Fig2 <- cowplot::plot_grid(pqq,
p_forest_nonhpo,
enrich1$forest,
pqg,
enrich1$plot +
ggtitle("") +
theme_set(theme_classic()) +
# coord_cartesian(xlim = c(0, 0.15), ylim = c(0, 0.15)) +
ylab("Frequency, likely genetic patient encounters") +
xlab("Frequency, non-genetic patients encounters"),
enrich8$plot +
ggtitle("") +
theme_set(theme_classic()) +
# coord_cartesian(xlim = c(0, 0.5), ylim = c(0, 0.5)) +
ylab("Frequency, SCN1A patient encounters") +
xlab("Frequency, CDKL5 patient encounters"),
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig2.pdf",
width = 12,
height = 8,
encoding = 'CP1253.enc') # to draw Lambda on panel A
Fig2
dev.off()
p_forest_nonhpo$data
view(df_conceptmatch)
df_med
## Subanalysis: Do likely genetic patients receive more rescue medication?
df_med %>%
filter(PatientId in df_match1$PatientId)
## Subanalysis: Do likely genetic patients receive more rescue medication?
df_med %>%
filter(PatientId %in% df_match1$PatientId)
## Subanalysis: Do likely genetic patients receive more rescue medication?
df_med %>%
filter(PatientId %in% df_match1$PatientId) %>%
left_join(df_match1[ ,c("PatientId", "group")])
## Subanalysis: Do likely genetic patients receive more rescue medication?
df_med %>%
filter(PatientId %in% df_match1$PatientId) %>%
left_join(df_match1[ ,c("PatientId", "group")]) %>%
distinct(PatientId, AgePrescription, MED_NAME, group)
## Subanalysis: Do likely genetic patients receive more rescue medication?
## subanalysis: do likely genetic patients receive more ASMs?
df_med_sub <- df_med %>%
filter(PatientId %in% df_match1$PatientId) %>%
left_join(df_match1[ ,c("PatientId", "group")]) %>%
distinct(PatientId, AgePrescription, MED_NAME, group)
stats_med_sub <- df_med_sub %>%
group_by(group) %>%
n_distinct(MED_NAME)
df_med_sub %>%
group_by(group)
stats_med_sub <- df_med_sub %>%
group_by(group) %>%
summarize(asm = n_distinct(MED_NAME))
stats_med_sub
stats_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME))
stats_med_sub
stats_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(uniq_asm = n_distinct(MED_NAME)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
df_med_sub %>%
group_by(PatientId, group) %>%
summarize(uniq_asm = n_distinct(MED_NAME)) %>%
group_by(group)
stats_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
stats_med_sub
p_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
ungroup() %>%
summarize(pval = t.test(n ~ group)$p.value)
p_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
rowwise() %>%
summarize(pval = t.test(n ~ group)$p.value)
p_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
ungroup() %>%
summarize(pval = t.test(asn ~ group)$p.value)
p_med_sub <- df_med_sub %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(MED_NAME)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
p_med_sub
## subanalysis: Do likely genetic patients receive more rescue medication?
df_med_sub
## subanalysis: Do likely genetic patients receive more rescue medication?
df_med_sub %>%
mutate(isRescue = if_else(MED_NAME %in% c("lorazepam", "diazepam", "clonazepam", "midazolam"), T, F))
## subanalysis: Do likely genetic patients receive more rescue medication?
df_med_resc <- df_med_sub %>%
mutate(isRescue = if_else(MED_NAME %in% c("lorazepam", "diazepam", "clonazepam", "midazolam"), T, F))
stats_med_resc <- df_med_resc %>%
group_by(PatientId, group) %>%
summarize(asm = count(isRescue)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
stats_med_sub <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
stats_med_sub
p_med_sub <- df_med_sub %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
stats_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
p_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
p_med_resc
## subanalysis: Do likely genetic patients receive more rescue medication?
df_med_resc <- df_med_sub %>%
mutate(isRescue = if_else(MED_NAME %in% c("lorazepam", "diazepam", "midazolam"), T, F))
stats_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
p_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
p_med_resc
stats_med_resc
## subanalysis: Do likely genetic patients receive more rescue medication?
df_med_resc <- df_med_sub %>%
mutate(isRescue = if_else(MED_NAME %in% c("lorazepam", "clonazepam", "clobazam", "diazepam", "midazolam"), T, F))
stats_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
group_by(group) %>%
summarize(mean = mean(asm), sd = sd(asm), min = min(asm), max = max(asm))
p_med_resc <- df_med_resc %>%
filter(isRescue) %>%
group_by(PatientId, group) %>%
summarize(asm = n_distinct(AgePrescription)) %>%
ungroup() %>%
summarize(pval = t.test(asm ~ group)$p.value)
p_med_resc
stats_med_resc
