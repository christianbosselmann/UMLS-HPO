df_er <- df_er %>%
group_by(group) %>%
add_count(PatientId, AdmissionType) %>%
distinct(PatientId, n)
### PHEINDEX SCORING -----------------------------------------------------------
## ref: https://www.medrxiv.org/content/10.1101/2023.01.27.23285056v1.full.pdf
## data: list of PatientIds, ContactAges, group membership and concepts
df_pheindex <- df_concepts[df_concepts$PatientId %in% df_match1$PatientId, ] %>%
distinct(PatientId, ConceptID) %>%
mutate(score = 0)
## C0: list of dataframes for scoring
ls_pheindex <- list()
## C1: Prolonged stay in the neonatal intensive care unit
# data not available
## C2: Prolonged or multiple hospitalizations after discharged from birth
# hasInpatient flag from df_inpatient
ls_pheindex[[2]]  <- df_inpatient %>%
distinct(PatientId, hasInpatient) %>%
filter(hasInpatient == TRUE) %>%
mutate(score = 3)
## C3: Visits or consults with multiple specialists other than general pediatricians.
# True for all patients (due to cohort definition)
ls_pheindex[[3]]  <- df_pheindex %>%
distinct(PatientId) %>%
mutate(score = 3)
## C4: Multiple emergency room (ER) visits.
ls_pheindex[[4]] <- df_er %>%
filter(n >= 5) %>%
mutate(score = 1) %>%
distinct(PatientId, score)
## C5: Feeding support (Gastrostomy tube).
ls_pheindex[[5]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0260683", ], # Gastrostomy status
df_pheindex[df_pheindex$ConceptID == "C0260761", ] # Encounter for attention to gastrostomy
) %>%
distinct(PatientId, score) %>%
mutate(score = 2)
## C6: Respiratory support (tracheostomy and mechanical ventilation outside of surgery).
ls_pheindex[[6]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0260682", ], # Tracheostomy status
df_pheindex[df_pheindex$ConceptID == "C2911575", ] # Dependence on respirator [ventilator] status
) %>%
distinct(PatientId, score) %>%
mutate(score = 2)
## C7: Imaging.
# NA
## C8: Genetic diagnostic tests.
# True for all likely genetic patients, false for all non-genetic patients.
ls_pheindex[[8]] <- df_match1 %>%
distinct(PatientId, group) %>%
filter(group == TRUE) %>%
mutate(score = 1)
## C9: Metabolic diagnostic tests
ls_pheindex[[9]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0494356", ], # Hypo-osmolality and hyponatremia
df_pheindex[df_pheindex$ConceptID == "C0020645", ], # Hyposmolality and/or hyponatremia
df_pheindex[df_pheindex$ConceptID == "C0029481", ] # Other abnormal blood chemistry
) %>%
distinct(PatientId, score) %>%
mutate(score = 1)
## C10: In-hospital death
# True for all deaths in survival analysis, false otherwise
ls_pheindex[[10]] <- df_surv %>%
filter(survivalFlag == 1) %>%
distinct(PatientId) %>%
mutate(score = 3)
## C11: Developmental delay.
ls_pheindex[[11]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0424605", ], # Developmental delay
df_pheindex[df_pheindex$ConceptID == "C0878706", ], # Lack of normal physiological development, unspecified
df_pheindex[df_pheindex$ConceptID == "C0476241", ], # Delayed developmental milestones
df_pheindex[df_pheindex$ConceptID == "C0878753", ], # Unspecified lack of expected normal physiological development in childhood
df_pheindex[df_pheindex$ConceptID == "C0154633", ], # Other developmental speech or language disorder
df_pheindex[df_pheindex$ConceptID == "C2830458", ], # Delayed milestone in childhood
df_pheindex[df_pheindex$ConceptID == "C0011757", ], # Developmental Coordination Disorder
df_pheindex[df_pheindex$ConceptID == "C0349324", ], # Other developmental disorders of speech and language
df_pheindex[df_pheindex$ConceptID == "C0236826", ], # Developmental expressive language disorder
df_pheindex[df_pheindex$ConceptID == "C3161331", ] # Unspecified intellectual disabilities
) %>%
distinct(PatientId, score) %>%
mutate(score = 1)
## C12: Diagnosis codes corresponding to metabolic diseases with â‰¥ 2 encounters
ls_pheindex[[12]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C0025517", ], # Metabolic Diseases
df_pheindex[df_pheindex$ConceptID == "C0268641", ] # Amino acid transport disorder
) %>%
distinct(PatientId, score) %>%
mutate(score = 3)
## C13: Heart surgeries
ls_pheindex[[13]] <- rbind(
df_pheindex[df_pheindex$ConceptID == "C2921289", ], # Personal history of (corrected) congenital malformations of heart and circulatory system
df_pheindex[df_pheindex$ConceptID == "C0477999", ] # Other specified congenital malformations of heart
) %>%
distinct(PatientId, score) %>%
mutate(score = 3)
## get group membership for each patient, calculate pheindex scores
df_pheindex <- lapply(ls_pheindex, function(x){x <- x[,c("PatientId", "score")]}) %>%
rbindlist(idcol = "id")
map_match <- df_match1 %>%
distinct(PatientId, group)
df_pheindex <- df_pheindex %>%
group_by(PatientId) %>%
summarize(score = sum(score)) %>%
left_join(map_match) %>%
na.omit
stats_pheindex <- df_pheindex %>%
group_by(group) %>%
summarize(mean = mean(score),
sd = sd(score),
min = min(score),
max = max(score),
iqr = IQR(score))
stats_p_pheindex <- df_pheindex %>%
summarize(pval = t.test(score ~ group)$p.value)
## recode
df_pheindex <- df_pheindex %>%
mutate(group = as.integer(group))
df_pheindex$label <- NA
df_pheindex[df_pheindex$group == 0, ]$label <- "Non-genetic"
df_pheindex[df_pheindex$group == 1, ]$label <- "Likely genetic"
## visualization: PhenIndex by group
df_pheindex <- df_pheindex %>%
mutate(label = factor(label, levels = c("Non-genetic", "Likely genetic")))
p_pheindex_violin <- df_pheindex %>%
ggplot(aes(y = score, x = label, fill = label)) +
geom_flat_violin(position = position_nudge(x = .1, y = 0), alpha = .8) +
guides(fill = "none", color = "none") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2") +
xlab("Group") +
ylab("PheIndex score") +
theme_classic() +
coord_cartesian(xlim = c(1.5, 2)) +
geom_boxplot(width = .1, show.legend = FALSE, outlier.shape = NA, alpha = 0.5) +
ggpubr::stat_compare_means(aes(label = ..p.signif..),
comparisons = list(c("Non-genetic", "Likely genetic")),
label.x = 1.5, label.y = c(15))
## visualization: PhenIndex categories by group (id)
df_phenindex <- lapply(ls_pheindex, function(x){x <- x[,c("PatientId", "score")]}) %>%
rbindlist(idcol = "id") %>%
group_by(PatientId, id) %>%
summarize(score = sum(score)) %>%
left_join(map_match) %>%
na.omit
p_pheindex_bar <- df_phenindex %>%
ggplot(aes(x = as.factor(id), fill = group)) +
geom_bar(position = position_dodge2(width = 0.9, preserve = "single")) +
xlab("PheIndex criteria (#)") +
ylab("Individuals (n)") +
guides(fill = "none", color = "none") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Dark2", labels = c("Non-genetic", "Likely genetic")) +
theme_classic() +
coord_cartesian(expand = FALSE)
# PheIndex criteria pairwise similarity heatmap
df_phenindex <- df_phenindex %>%
mutate(id = as.factor(id))
ls_phenindex <- split(df_phenindex, df_phenindex$id)
ls_phenindex <- lapply(ls_phenindex, function(x){x <- x$PatientId})
df_prop <- ls_phenindex %>%
map_dfr(~ .x %>% as_tibble(), .id = "name")
df_prop <- reshape2::dcast(df_prop, name ~ value, length)
df_prop <- df_prop[,-1]
df_prop[df_prop > 0] <- 1
mat_pheno <- proxy::simil(x = df_prop,
method = "cosine") # "jaccard", "euclidean", "cosine"
mat_pheno <- as.matrix(mat_pheno)
diag(mat_pheno) <- 1
colnames(mat_pheno) <- levels(df_phenindex$id)
rownames(mat_pheno) <- levels(df_phenindex$id)
coul <- colorRampPalette(brewer.pal(8, "Reds"))(25)
# plot
p_pheindex_heatmap <- pheatmap(mat_pheno,
display_numbers = TRUE,
symm = TRUE,
col = coul,
fontsize_number = 6,
xlab = "PheIndex criteria (#)",
ylab = "PheIndex criteria (#)")
p_pheindex_heatmap <- ggplotify::as.ggplot(p_pheindex_heatmap)
## table of PheIndex criteria for plot
library(gtable)
library(grid)
library(gridExtra)
p_pheindex_table <- tibble(Criterion = 1:13,
Description = c("Prolonged stay in the NICU",
"Prolonged or multiple hospitalizations",
"Visits or consults with multiple specialists",
"Multiple emergency room visits",
"Feeding support",
"Respiratory support",
"Imaging",
"Genetic diagnostic tests",
"Metabolic diagnostic tests",
"In-hospital death",
"Developmental delay",
"Diagnosis corresponding to metabolic diseases",
"Heart surgeries"))
p_pheindex_grob <- gridExtra::tableGrob(p_pheindex_table,
rows = NULL,
theme = ttheme_minimal(rowhead=list(fg_params=list(hjust=0, x=0)),
core=list(padding=unit(c(12, 4), "mm"),
fg_params=list(hjust=0, x=0.1))))
p_pheindex_grob <- gtable_add_grob(p_pheindex_grob,
grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),
t = 2, b = nrow(p_pheindex_grob), l = 1, r = ncol(p_pheindex_grob))
p_pheindex_grob <- gtable_add_grob(p_pheindex_grob,
grobs = rectGrob(gp = gpar(fill = NA, lwd = 2)),
t = 1, l = 1, r = ncol(p_pheindex_grob))
p_pheindex_table <- ggplotify::as.ggplot(p_pheindex_grob)
### OTHER SUB-ANALYSIS ---------------------------------------------------------
## For HPO OR plot, find the terms that make up geniturourinary system abnormality
# define descendants
vec_desc <- get_descendants(ont_hpo, "HP:0000119")
df_desc <- df_match1 %>%
# remove TSC patients, to see if association remains strong
filter(PatientId %nin% df_tsc$PatientID) %>%
# filter cases by those containing descendant terms
filter(term %in% vec_desc) %>%
filter(group == TRUE) %>%
group_by(term) %>%
count(sort = TRUE) %>%
# get descriptions and ic
left_join(desc_map, by = "term") %>%
left_join(df_ic, by = "term") %>%
ungroup() %>%
# get pvalue for each term, only keep if it's independently significant
left_join(enrich1$data[, c("term", "pvalue")], by = "term") %>%
filter(pvalue < 0.05) %>%
# sort by IC
slice_max(n, prop = 0.9) %>%
arrange(desc(ic))
# reduce to minimal set
vec_min <- minimal_set(ont_hpo, df_desc$term)
df_desc <- df_desc[df_desc$term %in% vec_min, ]
# restrict subgraph by propagating back up from our minimal set
vec_desc <- propagate_relations(ont_hpo, df_desc$term, "parents") %>% unique()
# make igraph, convert to bn
librarian::shelf(igraph)
parents <- ont_hpo$parents
self <- rep(names(parents), lengths(parents))
g <- igraph::make_graph(rbind(unlist(parents), self))
bng <- as.bn(g)
# generate HPO subgraph of node of interest
arcs <- data.frame(bng$arcs)
arcs <- arcs[arcs$X1 %in% vec_desc & arcs$X2 %in% vec_desc, ]
colnames(arcs) <- c("from", "to")
graph_hpo <- empty.graph(vec_desc)
arcs(graph_hpo) <- arcs
# revert to igraph and format graph
g2 <- as.igraph(graph_hpo)
V(g2)$label <- NA
V(g2)[vec_min]$label <- rep(LETTERS)[1:length(V(g2)[vec_min]$label)]
V(g2)$color <- "gray"
V(g2)[vec_min]$color <- "red"
V(g2)$size <- 8
vec_size <- -log10(df_desc$pvalue)
vec_size[vec_size < 7] <- 8
V(g2)[vec_min]$size <- vec_size
E(g2)$arrow.mode <- 2
# use ggplotify to get a grob-able object
pqg <- as.ggplot(expression(plot(g2,
vertex.frame.color = "black",
vertex.label.color = "white",
vertex.label.family = "Helvetica",
vertex.label.font = 1,
vertex.label.cex = .9,
edge.arrow.size = .5,
layout = layout_as_tree))) # Reingold-Tilford
pqg <- pqg +
theme(plot.margin = unit(c(-50, -20, -50, -50), "pt"))
### GENERATE REPORT ------------------------------------------------------------
# set global option of decimal point to midline for Lancet
options(OutDec = "Â·")
## Figure 1: Descriptive statistics of the study cohort.
Fig1 <- cowplot::plot_grid(p1,
p2 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p3 + scale_x_discrete(labels=c("Non-genetic", "Likely genetic")),
p5 + theme(legend.position = "none"),
p4 + theme(legend.position = "none"),
pt,
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig1.pdf",
width = 12,
height = 8)
Fig1
dev.off()
## Figure 2: Genetic vs. Non-Genetic
Fig2 <- cowplot::plot_grid(pqq,
p_forest_nonhpo,
enrich1$forest,
pqg,
enrich1$plot +
ggtitle("") +
theme_set(theme_classic()) +
# coord_cartesian(xlim = c(0, 0.15), ylim = c(0, 0.15)) +
ylab("Frequency, likely genetic patient encounters") +
xlab("Frequency, non-genetic patients encounters"),
# enrich8$plot +
#   ggtitle("") +
#   theme_set(theme_classic()) +
#   # coord_cartesian(xlim = c(0, 0.5), ylim = c(0, 0.5)) +
#   ylab("Frequency, SCN1A patient encounters") +
#   xlab("Frequency, CDKL5 patient encounters"),
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig2.pdf",
width = 12,
height = 8,
encoding = 'CP1253.enc') # to draw Lambda on panel A
Fig2
dev.off()
## Figure 3: Nicer heatmaps of longitudinal phenotypes and prescription patterns
Fig3 <- cowplot::plot_grid(pheat1 + theme(legend.position = "none"),
p_asm,
nrow = 1, labels = "AUTO", align = "none")
pdf(file = "Fig3.pdf",
width = 12,
height = 8)
Fig3
dev.off()
## Figure S1: Kaplan-Meier plot
pdf(file = "FigS1.pdf",
width = 8,
height = 6,
onefile = FALSE)
p_surv
dev.off()
## Figure S2: PheIndex plots
FigS2 <- cowplot::plot_grid(p_pheindex_violin, p_pheindex_bar,
p_pheindex_heatmap, p_pheindex_table,
nrow = 2, labels = "AUTO", align = "hv")
pdf(file = "FigS2.pdf",
width = 12,
height = 12)
FigS2
dev.off()
### CHART REVIEW --------------------------------------------------------------
# pull patient MRNs for manual chart review
df_match1 %>%
filter(term == "HP:0000083") %>% # renal insufficiency
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000083.csv")
df_match1 %>%
filter(term == "HP:0004383") %>% # hypoplastic left heart syndrome
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0004383.csv")
df_match1 %>%
filter(term == "HP:0000028") %>% # cryptorchidism
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000028.csv")
df_match1 %>%
filter(term == "HP:0000047") %>% # hypospadia
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000047.csv")
df_match1 %>%
filter(term == "HP:0000939") %>% # osteoporosis
distinct(PatientId) %>%
left_join(mrn_map) %>%
write_csv("/Users/cbosselmann/Desktop/hp_0000939.csv")
### MISC ----------------------------------------------------------------------
## get the number of SCN1A patients in the cohort and their mean follow-up
tmp_scn1a <- df_scn1a %>%
rename(MedicalRecordNumber = PAT_MRN_ID) %>%
left_join(mrn_map)
tmp_scn1a_fu <- p1$data %>%
filter(PatientId %in% tmp_scn1a$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(mean = mean(dur), median = median(dur),
sd = sd(dur), min = min(dur), max = max(dur),
iqr = IQR(dur))
# get number of individual gene patients in cohort
df_match1 %>%
distinct(PatientId) %>%
left_join(mrn_map) %>%
# filter(PatientId %in% df_scn1a$PatientID) %>%
# filter(MedicalRecordNumber %in% df_cdkl5$MRN) %>%
filter(MedicalRecordNumber %in% df_scn1a$PAT_MRN_ID) %>%
count()
# follow-up stats for matched cohort
stats_followup2 <- p1$data %>%
filter(PatientId %in% df_match1$PatientId) %>%
mutate(dur = upper-lower) %>%
summarize(sum(dur))
# average number of encounters per patient
df_match1 %>%
distinct(PatientId, ContactAge) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), median = median(n), sd = sd(n), min = min(n), max = max(n))
# average UMLS concepts per patient
df_match1 %>%
distinct(PatientId, ConceptID) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
# average HPO terms per patient
df_match1 %>%
distinct(PatientId, term) %>%
group_by(PatientId) %>%
count() %>%
ungroup() %>%
summarize(mean = mean(n), sd = sd(n), min = min(n), max = max(n))
# add OR 95% CI for text
# usage: getCI(enrich1$data) %>% filter(description %like% "TERM")
getCI <- function(input){
concept_odds <- data.frame(OR = 1:nrow(input),
CI1 = 1:nrow(input),
CI2 = 1:nrow(input))
for(i in 1:nrow(input)){
row <- input[i, ] %>%
ungroup() %>%
select(Y, Y_out, N, N_out) %>%
data.matrix()
mat <- matrix(data = row, nrow=2)
fish <- fisher.test(mat)
concept_odds$OR[i] <- fish$estimate
concept_odds$CI1[i] <- fish$conf.int[[1]] # lower bound
concept_odds$CI2[i] <- fish$conf.int[[2]] # upper bound
}
res <- cbind(input, concept_odds)
return(res)
}
## DL analysis 08/03/2023
# wants to see group differences between non-mapped terms in a list provided by Mark
tmp_xl <- readxl::read_excel("~/Desktop/EpilepsyHPO Mappings.xlsx", sheet = 2)
pqq
df_concepts
length(unique(df_concepts$ConceptID))
-log10(0.05/6558)
df_conceptmatch
df_match1
length(unique(df_match1$ConceptID))
## QQ plot
pqq <- gg_qqplot(df_conceptmatch$P_i) +
theme_classic() +
annotate(geom = "text", x = -Inf, y = Inf,
hjust = -0.15, vjust = 1 + 0.15 * 3,
label = sprintf("  Î»    = %.2f", inflation(df_conceptmatch$P_i)),
size = 5) +
coord_equal() +
theme(aspect.ratio = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
geom_hline(yintercept = -log10(0.05/length(unique(df_match1$ConceptID))), linetype = "dashed", col = "red")
pqq
# subset to matched cohort; cross-sectional for now
df_conceptmatch <- df_match1 %>%
distinct(PatientId, group) %>%
left_join(df_concepts[, c("PatientId", "ConceptID", "ConceptDesc")],
by = "PatientId") %>%
distinct()
# count by group, then do Fisher's test
df_conceptmatch <- df_conceptmatch %>%
group_by(group) %>%
count(ConceptID) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing, keep original values
ungroup() %>%
mutate(P_i = P) %>%
mutate(P = p.adjust(P, method = "bonferroni"))
## QQ plot
pqq <- gg_qqplot(df_conceptmatch$P_i) +
theme_classic() +
annotate(geom = "text", x = -Inf, y = Inf,
hjust = -0.15, vjust = 1 + 0.15 * 3,
label = sprintf("  Î»    = %.2f", inflation(df_conceptmatch$P_i)),
size = 5) +
coord_equal() +
theme(aspect.ratio = 1) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed") +
geom_hline(yintercept = -log10(0.05/length(unique(df_match1$ConceptID))), linetype = "dashed", col = "red")
pqq
## Figure 2: Genetic vs. Non-Genetic
Fig2 <- cowplot::plot_grid(pqq,
p_forest_nonhpo,
enrich1$forest,
pqg,
enrich1$plot +
ggtitle("") +
theme_set(theme_classic()) +
# coord_cartesian(xlim = c(0, 0.15), ylim = c(0, 0.15)) +
ylab("Frequency, likely genetic patient encounters") +
xlab("Frequency, non-genetic patients encounters"),
# enrich8$plot +
#   ggtitle("") +
#   theme_set(theme_classic()) +
#   # coord_cartesian(xlim = c(0, 0.5), ylim = c(0, 0.5)) +
#   ylab("Frequency, SCN1A patient encounters") +
#   xlab("Frequency, CDKL5 patient encounters"),
nrow = 2, labels = "AUTO", align = "none")
pdf(file = "Fig2.pdf",
width = 12,
height = 8,
encoding = 'CP1253.enc') # to draw Lambda on panel A
Fig2
dev.off()
0.05/length(unique(df_match1$ConceptID))
-log10(0.05/length(unique(df_match1$ConceptID)))
