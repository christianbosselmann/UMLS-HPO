# count by group, then do Fisher's test
df_conceptmatch <- df_conceptmatch %>%
group_by(group) %>%
count(ConceptID) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
ungroup() %>%
mutate(P = p.adjust(P, method = "bonferroni"))
# get descriptions
df_conceptmatch <- df_conceptmatch %>%
left_join(umls_map, by = "ConceptID")
df_conceptmatch
# keep significant associations
df_conceptmatch <- df_conceptmatch %>%
filter(P < 0.05)
# get descriptions
df_conceptmatch <- df_conceptmatch %>%
left_join(umls_map, by = "ConceptID")
df_conceptmatch
# subset to matched cohort; cross-sectional for now
df_conceptmatch <- df_match1 %>%
distinct(PatientId, group) %>%
left_join(df_concepts[, c("PatientId", "ConceptID", "ConceptDesc")], by = "PatientId") %>%
distinct()
# count by group, then do Fisher's test
df_conceptmatch <- df_conceptmatch %>%
group_by(group) %>%
count(ConceptID) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N, Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
ungroup() %>%
mutate(P = p.adjust(P, method = "bonferroni"))
# keep significant associations
df_conceptmatch <- df_conceptmatch %>%
filter(P < 0.05)
# get descriptions
df_conceptmatch <- df_conceptmatch %>%
left_join(umls_map, by = "ConceptID")
view(df_conceptmatch)
df_conceptmatch[df_conceptmatch$ConceptID == "C0478107"] <- "Other specified chromosome abnormalities"
df_conceptmatch[df_conceptmatch$ConceptID == "C0478107", ]$ConceptDesc <- "Other specified chromosome abnormalities"
df_conceptmatch[df_conceptmatch$ConceptID == "C0476431", ]$ConceptDesc <- "Abnormal karyotype"
df_conceptmatch[df_conceptmatch$ConceptID == "C2875116", ]$ConceptDesc <- "Other generalized epilepsy and epileptic syndromes, intractable, without status epilepticus"
df_conceptmatch[df_conceptmatch$ConceptID == "C2910620", ]$ConceptDesc <- "Encounter for screening for cardiovascular disorders"
df_conceptmatch[df_conceptmatch$ConceptID == "C3161331", ]$ConceptDesc <- "Unspecified intellectual disabilities"
df_conceptmatch[df_conceptmatch$ConceptID == "C0341102", ]$ConceptDesc <- "Gastroesophageal reflux disease without esophagitis"
df_conceptmatch[df_conceptmatch$ConceptID == "C2911172", ]$ConceptDesc <- "Other specified health status"
df_conceptmatch[df_conceptmatch$ConceptID == "C2911188", ]$ConceptDesc <- "Other long term (current) drug therapy"
view(df_conceptmatch)
# forest plot
df_conceptmatch %>%
filter(description %in% vec_terms) %>%
ggplot(aes(y = description)) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI)")
# forest plot
df_conceptmatch %>%
ggplot(aes(y = ConceptDesc)) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI)")
# forest plot
df_conceptmatch %>%
ggplot(aes(y = ConceptDesc)) +
geom_point(aes(x = log10(OR)), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
# forest plot
df_conceptmatch %>%
ggplot(aes(y = ConceptDesc)) +
geom_point(aes(x = log10(OR)), shape = 15, size = 3) +
geom_linerange(aes(xmin = log10(CI1), xmax = log10(CI2))) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
# forest plot
df_conceptmatch %>%
ggplot(aes(y = ConceptDesc)) +
geom_point(aes(x = log10(OR)), shape = 15, size = 3) +
geom_linerange(aes(xmin = log10(CI1), xmax = log10(CI2))) +
geom_vline(xintercept = log10(1), linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
?scale_x_continuous
# forest plot
df_conceptmatch %>%
ggplot(aes(y = ConceptDesc)) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
# forest plot
df_conceptmatch %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
# forest plot
df_conceptmatch %>%
ggplot(aes(y = reorder(ConceptDesc, OR))) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10',
oob = scales::oob_squish_infinite) +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
p2
enrich1$plot
## Figure 2: Genetic vs. Non-Genetic
p_tmp <- cowplot::plot_grid(enrich1$plot +
ggtitle("") +
theme_set(theme_classic()) +
coord_cartesian(xlim = c(0, 0.15), ylim = c(0, 0.15)) +
ylab("Term encounter frequency in likely genetic patients") +
xlab("Term encounter frequency in non-genetic patients"),
enrich1$forest,
nrow = 1, labels = "AUTO")
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot,
nrow = 2,
labels = c("", "C"))
Fig2
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot +
ylab("Term significance, one-tailed t-test of likely genetic vs. non-genetic patients, -log10(pvalue)")
xlab("Age (years) at highest term significance, binned by group encounter frequency"),
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot +
ylab("Term significance, one-tailed t-test of likely genetic vs. non-genetic patients, -log10(pvalue)") +
xlab("Age (years) at highest term significance, binned by group encounter frequency"),
nrow = 2,
labels = c("", "C"))
Fig2
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot +
ylab("Term association for genetic vs. non-genetic patients, one-tailed t-test -log10(pvalue)") +
xlab("Age (years) at highest term significance, binned by group encounter frequency"),
nrow = 2,
labels = c("", "C"))
Fig2
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot +
ylab("Term association for genetic vs. non-genetic patients /n one-tailed t-test -log10(pvalue)") +
xlab("Age (years) at highest term significance, binned by group encounter frequency"),
nrow = 2,
labels = c("", "C"))
Fig2
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot +
ylab("Term association for genetic vs. non-genetic patients \n one-tailed t-test -log10(pvalue)") +
xlab("Age (years) at highest term significance, binned by group encounter frequency"),
nrow = 2,
labels = c("", "C"))
Fig2
Fig2 <- cowplot::plot_grid(p_tmp, plong1$plot +
ylab("Term association for genetic vs. non-genetic \n patients, one-tailed t-test -log10(pvalue)") +
xlab("Age (years) at highest term significance, binned by group encounter frequency"),
nrow = 2,
labels = c("", "C"))
Fig2
pdf(file = "/Users/cbosselmann/Desktop/GitHub/UMLS-HPO/out/pub_genetic/Fig2.pdf",
width = 12,
height = 12)
Fig2
dev.off()
view(enrich1$data)
enrich1$data[enrich1$data$description == "Abnormality of the genitourinary system",]
enrich1$forest
### visualize relative term frequency as enrichment plot
#' @param data data.frame of Surgery, ConceptID (UMLS), term (HPO), and two groups to compare (TRUE; FALSE)
#' @param ontology HPO ontologyIndex object
#' @param forest logical flag; whether to calculate OR and draw a Forest plot
#' @param qq logical flag; whether to plot a qq plot with CGEN
#' @return res list of data.frame and plot object
enrichmentPlot <- function(data,
ontology,
forest = FALSE,
qq = TRUE){
# object to return
res <- list()
# read term names from ontologyIndex object
desc_map <- tibble(term = ontology$id,
description = ontology$name)
# reshape to dataframe of terms and columns Y/N for term count in group/!group
df_group <- data %>%
group_by(term) %>%
count(group) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0)
# add in term descriptions for graph
df_group <- left_join(df_group, desc_map, by = "term")
# # filter: by ancestors, as in longitudinal plot
# min_set <- ontologyIndex::minimal_set(ontology, df_group$term)
# df_group <- df_group[df_group$term %in% min_set, ]
# data characteristics
Y_tot <- max(df_group$Y) # total number of observations in group
N_tot <- max(df_group$N) # total number of observations in !group
n_tests <- nrow(df_group) # number of multiple tests
# setup plot
concept_vis_input.df3 <- df_group %>%
mutate(Y_out = Y_tot-Y,
N_out = N_tot-N) %>%
mutate(pvalue = fish_test_it(Y, Y_out,N, N_out, "pvalue"),
odds = fish_test_it(Y, Y_out, N, N_out, "odds"),
freq1 = Y/Y_tot,
freq2 = N/N_tot,
color_sig = ifelse(p.adjust(pvalue, "bonferroni") < 0.001, "<", ">"),
size_sel = -log10(pvalue)*4) %>%
ungroup() %>%
mutate(pvalue = p.adjust(pvalue, "bonferroni"))
# %>%
#   filter(freq1 > 0.05 | freq2 > 0.05) # minimum term frequency filter
# keep dataframe
res$data <- concept_vis_input.df3
max_freq <- c(concept_vis_input.df3$freq1, concept_vis_input.df3$freq2) %>% max()
# n of top p-values to label
top_sig <- head(sort(concept_vis_input.df3$pvalue, decreasing = FALSE), n = 15)
# plot
res$plot <- concept_vis_input.df3 %>%
mutate(expcat_text = ifelse(pvalue %in% top_sig, description, NA)) %>%
ggplot(aes(x = freq2, y = freq1, color = color_sig)) +
geom_point(aes(size = size_sel), show.legend = FALSE) +
theme_classic(base_size = 20) +
# coord_fixed(xlim = c(0, 0.25), ylim = c(0, 0.25)) +
coord_cartesian(xlim = c(0, max_freq), ylim = c(0, max_freq)) +
geom_abline(slope = 1, linetype = "dashed") +
scale_color_manual(values = c("red", "black")) +
labs(y = "Case",
x = "Control") +
geom_label_repel(aes(label = expcat_text),
color = "black",
max.overlaps = 8,
size = 3,
force_pull = 0.2,
min.segment.length = 0) +
theme(axis.text = element_text(color = "black"),
axis.line = element_line(color = "black")) +
guides(color = "none")
# optional: return a Forest plot
if(forest == TRUE){
# redo OR with confidence interval, assign to preallocated dataframe
concept_odds <- data.frame(OR = 1:nrow(concept_vis_input.df3),
CI1 = 1:nrow(concept_vis_input.df3),
CI2 = 1:nrow(concept_vis_input.df3))
for(i in 1:nrow(concept_vis_input.df3)){
row <- concept_vis_input.df3[i, ] %>%
ungroup() %>%
select(Y, Y_out, N, N_out) %>%
data.matrix()
mat <- matrix(data = row, nrow=2)
fish <- fisher.test(mat)
concept_odds$OR[i] <- fish$estimate
concept_odds$CI1[i] <- fish$conf.int[[1]] # lower bound
concept_odds$CI2[i] <- fish$conf.int[[2]] # upper bound
}
# merge with full df
df_concept <- cbind(concept_vis_input.df3, concept_odds)
df_concept <- df_concept %>%
ungroup()
# # only keep significant OR
# filter(CI1 > 1) %>%
# # only keep significant observations after correction
# filter(color_sig == "<")
# # filter: by ancestors
# min_set <- ontologyIndex::minimal_set(ont_hpo, df_concept$term)
# df_concept <- df_concept[df_concept$term %in% min_set, ]
# filter: custom terms to display on Forest plot
vec_terms <- c("Abnormality of metabolism/homeostasis",
"Abnormality of the immune system",
"Abnormality of the genitourinary system",
"Abnormality of the skeletal system",
"Abnormality of the cardiovascular system",
"Abnormality of the nervous system",
"Abnormality of the digestive system",
"Abnormal respiratory system physiology"
)
# plot
res$forest <- df_concept %>%
# # keep n best
# slice_max(order_by = OR, n = 8, with_ties = FALSE) %>%
filter(description %in% vec_terms) %>%
ggplot(aes(y = description)) +
# ggplot(aes(y = reorder(description, OR))) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
}
# diagnostics: QQ plot
concept_vis_input.df3 %>%
ungroup() %>%
pull(pvalue) %>%
QQ.plot(.)
abline(v = -log10(0.05), col = "blue")
return(res)
}
enrich1 <- df_match1 %>%
enrichmentPlot(., ont_hpo, forest = TRUE)
# manual labels
enrich1$plot$data$expcat_text <- NA
enrich1$plot$data[enrich1$plot$data$description == "Abnormality of the genitourinary system", ]$expcat_text <- "Abnormality of the genitourinary system"
enrich1$plot$data[enrich1$plot$data$description == "Abnormality of the skeletal system", ]$expcat_text <- "Abnormality of the skeletal system"
enrich1$plot$data[enrich1$plot$data$description == "Intracranial hemorrhage", ]$expcat_text <- "Intracranial hemorrhage"
enrich1$plot <- enrich1$plot +
coord_fixed(xlim = c(0, .2), ylim = c(0, .2)) +
ggtitle("Genetic vs. Non-Genetic") +
theme(plot.title = element_text(hjust = 0.5, size = 18))
enrich1$forest
view(enrich1$data)
enrich1$data[enrich1$data$description == "Abnormality of the genitourinary system",]
enrich1$forest$data
### visualize relative term frequency as enrichment plot
#' @param data data.frame of Surgery, ConceptID (UMLS), term (HPO), and two groups to compare (TRUE; FALSE)
#' @param ontology HPO ontologyIndex object
#' @param forest logical flag; whether to calculate OR and draw a Forest plot
#' @param qq logical flag; whether to plot a qq plot with CGEN
#' @return res list of data.frame and plot object
enrichmentPlot <- function(data,
ontology,
forest = FALSE,
qq = TRUE){
# object to return
res <- list()
# read term names from ontologyIndex object
desc_map <- tibble(term = ontology$id,
description = ontology$name)
# reshape to dataframe of terms and columns Y/N for term count in group/!group
df_group <- data %>%
group_by(term) %>%
count(group) %>%
pivot_wider(names_from = group, values_from = n) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
replace(is.na(.), 0)
# add in term descriptions for graph
df_group <- left_join(df_group, desc_map, by = "term")
# # filter: by ancestors, as in longitudinal plot
# min_set <- ontologyIndex::minimal_set(ontology, df_group$term)
# df_group <- df_group[df_group$term %in% min_set, ]
# data characteristics
Y_tot <- max(df_group$Y) # total number of observations in group
N_tot <- max(df_group$N) # total number of observations in !group
n_tests <- nrow(df_group) # number of multiple tests
# setup plot
concept_vis_input.df3 <- df_group %>%
mutate(Y_out = Y_tot-Y,
N_out = N_tot-N) %>%
mutate(pvalue = fish_test_it(Y, Y_out,N, N_out, "pvalue"),
odds = fish_test_it(Y, Y_out, N, N_out, "odds"),
freq1 = Y/Y_tot,
freq2 = N/N_tot,
color_sig = ifelse(p.adjust(pvalue, "bonferroni") < 0.001, "<", ">"),
size_sel = -log10(pvalue)*4) %>%
ungroup() %>%
mutate(pvalue = p.adjust(pvalue, "bonferroni"))
# %>%
#   filter(freq1 > 0.05 | freq2 > 0.05) # minimum term frequency filter
# keep dataframe
res$data <- concept_vis_input.df3
max_freq <- c(concept_vis_input.df3$freq1, concept_vis_input.df3$freq2) %>% max()
# n of top p-values to label
top_sig <- head(sort(concept_vis_input.df3$pvalue, decreasing = FALSE), n = 15)
# plot
res$plot <- concept_vis_input.df3 %>%
mutate(expcat_text = ifelse(pvalue %in% top_sig, description, NA)) %>%
ggplot(aes(x = freq2, y = freq1, color = color_sig)) +
geom_point(aes(size = size_sel), show.legend = FALSE) +
theme_classic(base_size = 20) +
# coord_fixed(xlim = c(0, 0.25), ylim = c(0, 0.25)) +
coord_cartesian(xlim = c(0, max_freq), ylim = c(0, max_freq)) +
geom_abline(slope = 1, linetype = "dashed") +
scale_color_manual(values = c("red", "black")) +
labs(y = "Case",
x = "Control") +
geom_label_repel(aes(label = expcat_text),
color = "black",
max.overlaps = 8,
size = 3,
force_pull = 0.2,
min.segment.length = 0) +
theme(axis.text = element_text(color = "black"),
axis.line = element_line(color = "black")) +
guides(color = "none")
# optional: return a Forest plot
if(forest == TRUE){
# redo OR with confidence interval, assign to preallocated dataframe
concept_odds <- data.frame(OR = 1:nrow(concept_vis_input.df3),
CI1 = 1:nrow(concept_vis_input.df3),
CI2 = 1:nrow(concept_vis_input.df3))
for(i in 1:nrow(concept_vis_input.df3)){
row <- concept_vis_input.df3[i, ] %>%
ungroup() %>%
select(Y, Y_out, N, N_out) %>%
data.matrix()
mat <- matrix(data = row, nrow=2)
fish <- fisher.test(mat)
concept_odds$OR[i] <- fish$estimate
concept_odds$CI1[i] <- fish$conf.int[[1]] # lower bound
concept_odds$CI2[i] <- fish$conf.int[[2]] # upper bound
}
# merge with full df
df_concept <- cbind(concept_vis_input.df3, concept_odds)
df_concept <- df_concept %>%
ungroup()
# # only keep significant OR
# filter(CI1 > 1) %>%
# # only keep significant observations after correction
# filter(color_sig == "<")
# # filter: by ancestors
# min_set <- ontologyIndex::minimal_set(ont_hpo, df_concept$term)
# df_concept <- df_concept[df_concept$term %in% min_set, ]
# filter: custom terms to display on Forest plot
vec_terms <- c("Abnormality of metabolism/homeostasis",
"Abnormality of the immune system",
"Abnormality of the genitourinary system",
"Abnormality of the skeletal system",
"Abnormality of the cardiovascular system",
"Abnormality of the nervous system",
"Abnormality of the digestive system",
"Abnormal respiratory system physiology"
)
# plot
res$forest <- df_concept %>%
# # keep n best
# slice_max(order_by = OR, n = 8, with_ties = FALSE) %>%
filter(description %in% vec_terms) %>%
ggplot(aes(y = description)) +
# ggplot(aes(y = reorder(description, OR))) +
geom_point(aes(x = OR), shape = 15, size = 3) +
geom_linerange(aes(xmin = CI1, xmax = CI2)) +
geom_vline(xintercept = 1, linetype = "dashed") +
# scale_x_continuous(trans = 'log10') +
expand_limits(x = 1) +
theme_classic() +
ylab("") +
xlab("Odds ratio (95% CI, log scale)")
}
# diagnostics: QQ plot
concept_vis_input.df3 %>%
ungroup() %>%
pull(pvalue) %>%
QQ.plot(.)
abline(v = -log10(0.05), col = "blue")
return(res)
}
enrich1 <- df_match1 %>%
enrichmentPlot(., ont_hpo, forest = TRUE)
# manual labels
enrich1$plot$data$expcat_text <- NA
enrich1$plot$data[enrich1$plot$data$description == "Abnormality of the genitourinary system", ]$expcat_text <- "Abnormality of the genitourinary system"
enrich1$plot$data[enrich1$plot$data$description == "Abnormality of the skeletal system", ]$expcat_text <- "Abnormality of the skeletal system"
enrich1$plot$data[enrich1$plot$data$description == "Intracranial hemorrhage", ]$expcat_text <- "Intracranial hemorrhage"
enrich1$plot <- enrich1$plot +
coord_fixed(xlim = c(0, .2), ylim = c(0, .2)) +
ggtitle("Genetic vs. Non-Genetic") +
theme(plot.title = element_text(hjust = 0.5, size = 18))
enrich1$forest
log10(2)
log10(1.9)
log10(1)
gc()
Fig1
