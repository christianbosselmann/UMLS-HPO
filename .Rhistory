unnest(cols = c(prop_terms)) %>%
group_by(PatientId) %>%
transmute(term = paste0(prop_terms, collapse = ",")) %>%
distinct(PatientId, term, GENEPOS_comb)
### WIP: CLUSTERING IN PHENOTYPIC SPACE ---------------------------------------
# take ls_mapped, a list of length bins, and work from there to get a list where
# each element is a unique patient with a character vector of propagated HPO terms
tmp <- ls_mapped %>%
rbindlist() %>%
distinct(PatientId, prop_terms, GENEPOS_comb) %>%
unnest(cols = c(prop_terms)) %>%
group_by(PatientId) %>%
mutate(term = paste0(prop_terms, collapse = ",")) %>%
distinct(PatientId, term, GENEPOS_comb)
tmp
tmp2 <- split(tmp, tmp$term)
tmp2
tmp2 <- split(tmp, tmp$PatientId)
tmp2
tmp
### WIP: CLUSTERING IN PHENOTYPIC SPACE ---------------------------------------
# take ls_mapped, a list of length bins, and work from there to get a list where
# each element is a unique patient with a character vector of propagated HPO terms
# maintain group label (GENEPOS_comb)
df_clust <- ls_mapped %>%
rbindlist() %>%
distinct(PatientId, prop_terms, GENEPOS_comb) %>%
unnest(cols = c(prop_terms)) %>%
group_by(PatientId) %>%
mutate(term = paste0(prop_terms, collapse = ",")) %>%
distinct(PatientId, term, GENEPOS_comb)
y_clust <- df_clust$GENEPOS_comb
ls_clust <- split(df_clust, tmp$PatientId)
ls_clust <- split(df_clust, df_clust$PatientId)
ls_clust <- split(df_clust, df_clust$PatientId) %>%
lapply(function(x){x <- x$term})
ls_clust
unlist(strsplit(tmp$term, ","))
ls_clust <- split(df_clust, df_clust$PatientId) %>%
lapply(function(x){x <- unlist(strsplit(x$term, ","))})
ls_clust
# get pairwise phenotypic similarity
mat_clust <- pairwiseSimilarity(ls_clust, ont_hpo, "resnik")
dim(mat_clust)
diag(mat_clust)
# use pairwise similarity for spectral clustering
library(Spectrum)
librarian::shelf(Spectrum)
tmp <- estimate_k(mat_clust)
k_test <- tmp
tmp <- kernel_pca(mat_clust)
tmp
y_clust
# maintain group label (GENEPOS_comb) by row or list index
y_clust <- df_clust$GENEPOS_comb %>%
as.factor(levels = c("Y", "N"))
# maintain group label (GENEPOS_comb) by row or list index
y_clust <- df_clust$GENEPOS_comb %>%
as.factor(., levels = c("Y", "N"))
# maintain group label (GENEPOS_comb) by row or list index
y_clust <- factor(df_clust$GENEPOS_comb, levels = c("Y", "N"))
tmp <- kernel_pca(mat_clust, labels = y_clust)
tmp
plot_kpca <- kernel_pca(mat_clust, labels = y_clust, dotsize = 1)
plot_kpca
# now for spectral clustering
tmp <- Spectrum(mat_clust)
tmp$assignments
tmp$eigenvector_analysis
tmp$K
tmp$similarity_matrix
tmp$eigensystem
# now for spectral clustering
tmp <- Spectrum(mat_clust, showpca = TRUE)
# now for spectral clustering
tmp <- Spectrum(mat_clust,
showpca = TRUE,
method = 2)
# now for spectral clustering
tmp <- Spectrum(mat_clust,
showpca = TRUE,
method = 3,
fixk = 2)
?Spectrum
pca(tmp$similarity_matrix, labels = tmp$assignments)
pca(tmp$similarity_matrix, labels = tmp$assignments, dotsize = 1)
pca(tmp$similarity_matrix, labels = y, dotsize = 1)
pca(tmp$similarity_matrix, labels = y_clust, dotsize = 1)
# now for spectral clustering
tmp <- Spectrum(mat_clust,
showpca = TRUE,
method = 2,
tunekernel = TRUE)
# for clustering, shape list into wide dataframe
mx <- max(lengths(ls_clust))
d1 <- data.frame(lapply(ls_clust, `length<-`, mx))
d1
view(d1)
?pivot_wider
head(d1)
view(d1)
view(t(d1))
d1
x <- unique(x)
tmp <- lapply(ls_clust, function(x){
x <- unique(x)
})
tmp
tmp <- lapply(tmp, `length<-`, mx)
tmp
tmp <- tmp %>% data.frame()
tmp
view(tmp)
?pivot_longer
tmp2 <- tmp %>%
pivot_longer(names_to = "id")
tmp2 <- tmp %>%
pivot_longer(cols = everything(),
names_to = "id")
view(tmp2)
head(tmp2)
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
pivot_wider(id_cols = "id", names_from = "value")
?pivot_wider
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct() %>%
pivot_wider(id_cols = "id", names_from = "value", values_fill = list(value = 0))
tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct()
tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value)
tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value", values_fill = list(value = 0))
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value")
view(tmp2)
head/tmp2
head(tmp2)
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(is.na(.), 0) %>%
replace(!is.na(.), 1)
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(is.na(.), 0)
tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id)
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(is.na(.), 0)
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(is.na(.), "0")
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "0") %>%
replace(is.na(.), "0")
view(tmp2)
tmp2 <- tmp %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0")
view(tmp2)
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0")
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric))
head(ls_df)
# now for spectral clustering
tmp <- Spectrum(ls_df,
showpca = TRUE,
method = 2,
tunekernel = TRUE)
pca(tmp$similarity_matrix,
labels = tmp$assignments,
axistextsize = 8,
legendtextsize = 8,
dotsize=2)
pca(tmp$similarity_matrix,
labels = y_clust,
axistextsize = 8,
legendtextsize = 8,
dotsize = 2)
nrow(ls_df)
length(y_clust)
nrow(tmp$similarity_matrix)
pca(tmp$similarity_matrix,
labels = tmp$assignments,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
pca(tmp$similarity_matrix,
labels = tmp$assignments,
axistextsize = 8,
legendtextsize = 8,
dotsize = .1)
dim(tmp$similarity_matrix)
length(ls_df)
view(ls_df)
?Spectrum
tmp <- t(ls_df)
view(tmp)
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric)) %>%
t() %>%
as.data.frame()
head(ls_df)
view(ls_df)
# now for spectral clustering
tmp <- Spectrum(ls_df,
showpca = TRUE,
method = 2,
tunekernel = TRUE)
pca(tmp$similarity_matrix,
labels = tmp$assignments,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
pca(tmp$similarity_matrix,
labels = y_clust,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
?Spectrum
k-test
k_test
# simple baseline: kpca
plot_kpca <- kernel_pca(mat_clust, labels = y_clust, dotsize = 1)
plot_kpca
# simple baseline: kpca
plot_kpca <- kernel_pca(tmp$similarity_matrix, labels = y_clust, dotsize = 1)
plot_kpca
# simple baseline: kpca
plot_kpca <- kernel_pca(ls_df, similarity = F, labels = y_clust, dotsize = 1)
# now for spectral clustering
tmp <- Spectrum(ls_df,
showpca = TRUE,
method = 3,
fixk = 2,
dotsize = 1)
kernel_pca(tmp$similarity_matrix, labels = y_clust, dotsize = 1)
tmp
pca(tmp$similarity_matrix,
labels = tmp$assignments,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
pca(tmp$similarity_matrix,
labels = y_clust,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
?Spectrum
# now for spectral clustering
tmp <- Spectrum(ls_df,
showpca = TRUE,
method = 1,
dotsize = 1)
tmp$assignments
table(tmp$assignments)
# simple baseline: kpca
plot_kpca <- kernel_pca(mat_clust, labels = y_clust, dotsize = 1)
?kernel_pca
plot_kpca
kernel_pca(tmp$similarity_matrix, labels = tmp$assignments, dotsize = 1)
pca(tmp$similarity_matrix,
labels = y_clust,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
kernel_pca(tmp$similarity_matrix,
labels = y_clust,
dotsize = 1)
ls_df
ls_df <- df[,apply(ls_df, 2, var, na.rm=TRUE) != 0]
ls_df <- ls_df[,apply(ls_df, 2, var, na.rm=TRUE) != 0]
# now for spectral clustering
tmp <- Spectrum(ls_df,
showpca = TRUE,
method = 1,
dotsize = 1)
pca(tmp$similarity_matrix,
labels = y_clust,
axistextsize = 8,
legendtextsize = 8,
dotsize = 1)
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric)) %>%
t() %>%
as.data.frame()
ls_df <- ls_df[,apply(ls_df, 2, var, na.rm=TRUE) != 0]
table(ls_df$V1)
view(ls_df)
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
head(ls_df)
view(ls_df)
tmp <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id)
view(tmp)
table(tmp$`HP:0000001`)
tmp <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0")
table(tmp$`HP:0000001`)
tmp <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric))
table(tmp$`HP:0000001`)
view(tmp)
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric)) %>%
transpose()
view(ls_df)
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric)) %>%
transpose()
view(ls_df)
# for Spectrum, shape list into dataframe: pad, pivot and make binary
mx <- max(lengths(ls_clust))
ls_df <- lapply(ls_clust, function(x){
x <- unique(x)
})
ls_df <- lapply(ls_df, `length<-`, mx)
ls_df <- ls_df %>% data.frame()
tmp <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric))
view(tmp)
ls_df <- ls_df %>%
pivot_longer(cols = everything(), names_to = "id") %>%
distinct(id, value) %>%
pivot_wider(id_cols = "id", names_from = "value") %>%
select(-id) %>%
replace(!is.na(.), "1") %>%
replace(is.na(.), "0") %>%
mutate(across(where(is.character), as.numeric)) %>%
transpose()
table(ls_df[1,])
sum(ls_df[1,])
# now for spectral clustering
tmp <- Spectrum(ls_df,
showpca = TRUE,
method = 1,
dotsize = 1)
### SUBGROUPS: PREPROCESSING ---------------------------------------------------
# data: get list of MRNs per patient
df_cdkl5 <- read_csv("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/cdkl5_genetic.csv")
df_scn1a <- read_csv("~/Desktop/CCF/EMR cohort study/Surgery cohort/data/scn1a_genetic.csv")
# preprocessing as above
df_genes <- df_raw %>%
mutate(cdkl5 = .$MedicalRecordNumber %in% df_cdkl5$MRN) %>%
mutate(scn1a = .$MedicalRecordNumber %in% df_scn1a$PAT_MRN_ID) %>%
select(PatientId, # patient ID
ConceptID, # UMLS code for encounter
GENEPOS_comb, # binary vector: non-genetic vs likely genetic patient
ContactAge, # relative age at encounter
ProcAge, # age at epilepsy CPT
cdkl5, # bool, cdkl5?
scn1a # bool, scn1a?
) %>%
group_by(PatientId) %>%
arrange(desc(ContactAge)) %>%
fill(ContactAge, .direction = c("up")) %>%
na.omit
# fix group column
df_genes <- df_genes %>%
mutate(status =
ifelse(scn1a == TRUE, "scn1a",
ifelse(cdkl5 == TRUE, "cdkl5",
ifelse(GENEPOS_comb == "N", "nongenetic",
ifelse(GENEPOS_comb == "Y", "genetic",
NA))))) %>%
select(PatientId, ConceptID, ContactAge, ProcAge, status)
df_genes
# grab df_genes from below
tmp2 <- df_genes %>%
distinct(PatientId, status)
y_clust
tmp <- ls_mapped %>%
rbindlist() %>%
distinct(PatientId, prop_terms, GENEPOS_comb)
df_clust
ls_clust
ls_clust <- split(df_clust, df_clust$PatientId) %>%
lapply(function(x){x <- unlist(strsplit(x$term, ","))
x <- unique(x)})
ls_clust
# get pairwise phenotypic similarity
mat_clust <- pairwiseSimilarity(ls_clust, ont_hpo, "resnik")
# use pairwise similarity for spectral clustering
librarian::shelf(Spectrum)
# estimate n cluster
k_test <- estimate_k(mat_clust)
# simple baseline: kpca
plot_kpca <- kernel_pca(mat_clust, labels = y_clust, dotsize = 1)
plot_kpca
