midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
df_match7 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit
df_match7 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
length(unique(.$PatientId))
df_match7 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
length(unique(PatientId))
df_match7 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
n_distinct(PatientId)
df_match7 %>%
+     # merge in patient ID and group label
+     distinct(PatientId, group) %>%
+     left_join(df_med, by = "PatientId") %>%
+     na.omit
tmp <- v
tmp <- df_match7 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit
length(unique(tmp$PatientId))
tmp <- df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit
length(unique(tmp$PatientId))
df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit
### WIP
## Group analysis: Heatmap (OR)
df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# adjust binwidth here; line optional
mutate(YearsPrescription = cut(YearsPrescription,
breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
?cut_number
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5) %>%
### WIP
## Group analysis: Heatmap (OR)
df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match2 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match2 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match4 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match5 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match3 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match6 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
### WIP
## Group analysis: Heatmap (OR)
df_match1 %>%
# merge in patient ID and group label
distinct(PatientId, group) %>%
left_join(df_med, by = "PatientId") %>%
na.omit %>%
# # adjust binwidth here; line optional
mutate(YearsPrescription = cut_number(YearsPrescription, 5)) %>%
# mutate(YearsPrescription = cut(YearsPrescription,
#                                breaks=c(0, 6, 12, 18, 99), include.lowest=TRUE)) %>%
# count ASM prescription per group; for each age bin (year)
group_by(group, MED_NAME, YearsPrescription) %>%
summarize(test = n()) %>%
# prepare Fisher's test
pivot_wider(names_from = group, values_from = test) %>%
rename(N = `FALSE`, Y = `TRUE`) %>%
# force complete all cases
complete(MED_NAME, YearsPrescription) %>%
replace(is.na(.), 0) %>%
mutate(N_out = max(N)-N,
Y_out = max(Y)-Y) %>%
rowwise() %>%
# do Fisher's test
mutate(P = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$p.value,
OR = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$estimate,
CI1 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[1]],
CI2 = fisher.test(matrix(c(Y, Y_out, N, N_out), nrow = 2, ncol = 2))$conf.int[[2]]) %>%
# adjust for multiple testing
mutate(P = p.adjust(P, method = "bonferroni")) %>%
# # force OR with insignificant pvalues to be NA
# mutate(OR = ifelse(P > 0.05, NA, OR)) %>%
# plot
ggplot(aes(x = YearsPrescription,
y = factor(MED_NAME, levels = asm_vec[asm_vec %in% df_asm$MED_NAME]),
fill = log10(OR))) +
scale_y_discrete(drop = FALSE) +
geom_tile(color = "black") +
theme_classic() +
ylab("") +
xlab("Age (years)") +
# scale_fill_gradientn(colors = hcl.colors(20, "Temps"),
#                      na.value = "darkgrey") +
scale_fill_gradient2(low = "#00b4fb",
mid = "#F5F5F5",
high = "#ff8422",
midpoint = 0, # adjust based on OR or log OR
na.value = "#F5F5F5",
limits = c(-2, 2),
oob = scales::squish) +
coord_fixed()
